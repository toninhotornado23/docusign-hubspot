"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromiseBlogTagsApi = void 0;
const middleware_1 = require("../middleware");
const ObservableAPI_1 = require("./ObservableAPI");
class PromiseBlogTagsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_1.ObservableBlogTagsApi(configuration, requestFactory, responseProcessor);
    }
    archiveWithHttpInfo(objectId, archived, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.archiveWithHttpInfo(objectId, archived, observableOptions);
        return result.toPromise();
    }
    archive(objectId, archived, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.archive(objectId, archived, observableOptions);
        return result.toPromise();
    }
    archiveBatchWithHttpInfo(batchInputString, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.archiveBatchWithHttpInfo(batchInputString, observableOptions);
        return result.toPromise();
    }
    archiveBatch(batchInputString, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.archiveBatch(batchInputString, observableOptions);
        return result.toPromise();
    }
    attachToLangGroupWithHttpInfo(attachToLangPrimaryRequestVNext, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.attachToLangGroupWithHttpInfo(attachToLangPrimaryRequestVNext, observableOptions);
        return result.toPromise();
    }
    attachToLangGroup(attachToLangPrimaryRequestVNext, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.attachToLangGroup(attachToLangPrimaryRequestVNext, observableOptions);
        return result.toPromise();
    }
    createWithHttpInfo(tag, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.createWithHttpInfo(tag, observableOptions);
        return result.toPromise();
    }
    create(tag, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.create(tag, observableOptions);
        return result.toPromise();
    }
    createBatchWithHttpInfo(batchInputTag, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.createBatchWithHttpInfo(batchInputTag, observableOptions);
        return result.toPromise();
    }
    createBatch(batchInputTag, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.createBatch(batchInputTag, observableOptions);
        return result.toPromise();
    }
    createLangVariationWithHttpInfo(tagCloneRequestVNext, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.createLangVariationWithHttpInfo(tagCloneRequestVNext, observableOptions);
        return result.toPromise();
    }
    createLangVariation(tagCloneRequestVNext, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.createLangVariation(tagCloneRequestVNext, observableOptions);
        return result.toPromise();
    }
    detachFromLangGroupWithHttpInfo(detachFromLangGroupRequestVNext, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.detachFromLangGroupWithHttpInfo(detachFromLangGroupRequestVNext, observableOptions);
        return result.toPromise();
    }
    detachFromLangGroup(detachFromLangGroupRequestVNext, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.detachFromLangGroup(detachFromLangGroupRequestVNext, observableOptions);
        return result.toPromise();
    }
    getByIdWithHttpInfo(objectId, archived, property, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.getByIdWithHttpInfo(objectId, archived, property, observableOptions);
        return result.toPromise();
    }
    getById(objectId, archived, property, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.getById(objectId, archived, property, observableOptions);
        return result.toPromise();
    }
    getPageWithHttpInfo(createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, sort, after, limit, archived, property, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.getPageWithHttpInfo(createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, sort, after, limit, archived, property, observableOptions);
        return result.toPromise();
    }
    getPage(createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, sort, after, limit, archived, property, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.getPage(createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, sort, after, limit, archived, property, observableOptions);
        return result.toPromise();
    }
    readBatchWithHttpInfo(batchInputString, archived, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.readBatchWithHttpInfo(batchInputString, archived, observableOptions);
        return result.toPromise();
    }
    readBatch(batchInputString, archived, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.readBatch(batchInputString, archived, observableOptions);
        return result.toPromise();
    }
    setLangPrimaryWithHttpInfo(setNewLanguagePrimaryRequestVNext, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.setLangPrimaryWithHttpInfo(setNewLanguagePrimaryRequestVNext, observableOptions);
        return result.toPromise();
    }
    setLangPrimary(setNewLanguagePrimaryRequestVNext, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.setLangPrimary(setNewLanguagePrimaryRequestVNext, observableOptions);
        return result.toPromise();
    }
    updateWithHttpInfo(objectId, tag, archived, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.updateWithHttpInfo(objectId, tag, archived, observableOptions);
        return result.toPromise();
    }
    update(objectId, tag, archived, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.update(objectId, tag, archived, observableOptions);
        return result.toPromise();
    }
    updateBatchWithHttpInfo(batchInputJsonNode, archived, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.updateBatchWithHttpInfo(batchInputJsonNode, archived, observableOptions);
        return result.toPromise();
    }
    updateBatch(batchInputJsonNode, archived, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.updateBatch(batchInputJsonNode, archived, observableOptions);
        return result.toPromise();
    }
    updateLangsWithHttpInfo(updateLanguagesRequestVNext, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.updateLangsWithHttpInfo(updateLanguagesRequestVNext, observableOptions);
        return result.toPromise();
    }
    updateLangs(updateLanguagesRequestVNext, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.updateLangs(updateLanguagesRequestVNext, observableOptions);
        return result.toPromise();
    }
}
exports.PromiseBlogTagsApi = PromiseBlogTagsApi;
//# sourceMappingURL=PromiseAPI.js.map