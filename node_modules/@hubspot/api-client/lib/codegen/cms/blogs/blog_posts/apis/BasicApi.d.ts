import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext, HttpInfo } from '../http/http';
import { BlogPost } from '../models/BlogPost';
import { CollectionResponseWithTotalBlogPostForwardPaging } from '../models/CollectionResponseWithTotalBlogPostForwardPaging';
import { CollectionResponseWithTotalVersionBlogPost } from '../models/CollectionResponseWithTotalVersionBlogPost';
import { ContentCloneRequestVNext } from '../models/ContentCloneRequestVNext';
import { ContentScheduleRequestVNext } from '../models/ContentScheduleRequestVNext';
import { VersionBlogPost } from '../models/VersionBlogPost';
export declare class BasicApiRequestFactory extends BaseAPIRequestFactory {
    archive(objectId: string, archived?: boolean, _options?: Configuration): Promise<RequestContext>;
    clone(contentCloneRequestVNext: ContentCloneRequestVNext, _options?: Configuration): Promise<RequestContext>;
    create(blogPost: BlogPost, _options?: Configuration): Promise<RequestContext>;
    getById(objectId: string, archived?: boolean, property?: string, _options?: Configuration): Promise<RequestContext>;
    getDraftById(objectId: string, _options?: Configuration): Promise<RequestContext>;
    getPage(createdAt?: Date, createdAfter?: Date, createdBefore?: Date, updatedAt?: Date, updatedAfter?: Date, updatedBefore?: Date, sort?: Array<string>, after?: string, limit?: number, archived?: boolean, property?: string, _options?: Configuration): Promise<RequestContext>;
    getPreviousVersion(objectId: string, revisionId: string, _options?: Configuration): Promise<RequestContext>;
    getPreviousVersions(objectId: string, after?: string, before?: string, limit?: number, _options?: Configuration): Promise<RequestContext>;
    pushLive(objectId: string, _options?: Configuration): Promise<RequestContext>;
    resetDraft(objectId: string, _options?: Configuration): Promise<RequestContext>;
    restorePreviousVersion(objectId: string, revisionId: string, _options?: Configuration): Promise<RequestContext>;
    restorePreviousVersionToDraft(objectId: string, revisionId: number, _options?: Configuration): Promise<RequestContext>;
    schedule(contentScheduleRequestVNext: ContentScheduleRequestVNext, _options?: Configuration): Promise<RequestContext>;
    update(objectId: string, blogPost: BlogPost, archived?: boolean, _options?: Configuration): Promise<RequestContext>;
    updateDraft(objectId: string, blogPost: BlogPost, _options?: Configuration): Promise<RequestContext>;
}
export declare class BasicApiResponseProcessor {
    archiveWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    cloneWithHttpInfo(response: ResponseContext): Promise<HttpInfo<BlogPost>>;
    createWithHttpInfo(response: ResponseContext): Promise<HttpInfo<BlogPost>>;
    getByIdWithHttpInfo(response: ResponseContext): Promise<HttpInfo<BlogPost>>;
    getDraftByIdWithHttpInfo(response: ResponseContext): Promise<HttpInfo<BlogPost>>;
    getPageWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CollectionResponseWithTotalBlogPostForwardPaging>>;
    getPreviousVersionWithHttpInfo(response: ResponseContext): Promise<HttpInfo<VersionBlogPost>>;
    getPreviousVersionsWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CollectionResponseWithTotalVersionBlogPost>>;
    pushLiveWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    resetDraftWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    restorePreviousVersionWithHttpInfo(response: ResponseContext): Promise<HttpInfo<BlogPost>>;
    restorePreviousVersionToDraftWithHttpInfo(response: ResponseContext): Promise<HttpInfo<BlogPost>>;
    scheduleWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    updateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<BlogPost>>;
    updateDraftWithHttpInfo(response: ResponseContext): Promise<HttpInfo<BlogPost>>;
}
