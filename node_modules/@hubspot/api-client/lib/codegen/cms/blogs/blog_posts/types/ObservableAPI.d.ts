import { HttpInfo } from '../http/http';
import { Configuration, ConfigurationOptions } from '../configuration';
import { Observable } from '../rxjsStub';
import { AttachToLangPrimaryRequestVNext } from '../models/AttachToLangPrimaryRequestVNext';
import { BatchInputBlogPost } from '../models/BatchInputBlogPost';
import { BatchInputJsonNode } from '../models/BatchInputJsonNode';
import { BatchInputString } from '../models/BatchInputString';
import { BatchResponseBlogPost } from '../models/BatchResponseBlogPost';
import { BatchResponseBlogPostWithErrors } from '../models/BatchResponseBlogPostWithErrors';
import { BlogPost } from '../models/BlogPost';
import { BlogPostLanguageCloneRequestVNext } from '../models/BlogPostLanguageCloneRequestVNext';
import { CollectionResponseWithTotalBlogPostForwardPaging } from '../models/CollectionResponseWithTotalBlogPostForwardPaging';
import { CollectionResponseWithTotalVersionBlogPost } from '../models/CollectionResponseWithTotalVersionBlogPost';
import { ContentCloneRequestVNext } from '../models/ContentCloneRequestVNext';
import { ContentScheduleRequestVNext } from '../models/ContentScheduleRequestVNext';
import { DetachFromLangGroupRequestVNext } from '../models/DetachFromLangGroupRequestVNext';
import { SetNewLanguagePrimaryRequestVNext } from '../models/SetNewLanguagePrimaryRequestVNext';
import { UpdateLanguagesRequestVNext } from '../models/UpdateLanguagesRequestVNext';
import { VersionBlogPost } from '../models/VersionBlogPost';
import { BasicApiRequestFactory, BasicApiResponseProcessor } from "../apis/BasicApi";
export declare class ObservableBasicApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BasicApiRequestFactory, responseProcessor?: BasicApiResponseProcessor);
    archiveWithHttpInfo(objectId: string, archived?: boolean, _options?: ConfigurationOptions): Observable<HttpInfo<void>>;
    archive(objectId: string, archived?: boolean, _options?: ConfigurationOptions): Observable<void>;
    cloneWithHttpInfo(contentCloneRequestVNext: ContentCloneRequestVNext, _options?: ConfigurationOptions): Observable<HttpInfo<BlogPost>>;
    clone(contentCloneRequestVNext: ContentCloneRequestVNext, _options?: ConfigurationOptions): Observable<BlogPost>;
    createWithHttpInfo(blogPost: BlogPost, _options?: ConfigurationOptions): Observable<HttpInfo<BlogPost>>;
    create(blogPost: BlogPost, _options?: ConfigurationOptions): Observable<BlogPost>;
    getByIdWithHttpInfo(objectId: string, archived?: boolean, property?: string, _options?: ConfigurationOptions): Observable<HttpInfo<BlogPost>>;
    getById(objectId: string, archived?: boolean, property?: string, _options?: ConfigurationOptions): Observable<BlogPost>;
    getDraftByIdWithHttpInfo(objectId: string, _options?: ConfigurationOptions): Observable<HttpInfo<BlogPost>>;
    getDraftById(objectId: string, _options?: ConfigurationOptions): Observable<BlogPost>;
    getPageWithHttpInfo(createdAt?: Date, createdAfter?: Date, createdBefore?: Date, updatedAt?: Date, updatedAfter?: Date, updatedBefore?: Date, sort?: Array<string>, after?: string, limit?: number, archived?: boolean, property?: string, _options?: ConfigurationOptions): Observable<HttpInfo<CollectionResponseWithTotalBlogPostForwardPaging>>;
    getPage(createdAt?: Date, createdAfter?: Date, createdBefore?: Date, updatedAt?: Date, updatedAfter?: Date, updatedBefore?: Date, sort?: Array<string>, after?: string, limit?: number, archived?: boolean, property?: string, _options?: ConfigurationOptions): Observable<CollectionResponseWithTotalBlogPostForwardPaging>;
    getPreviousVersionWithHttpInfo(objectId: string, revisionId: string, _options?: ConfigurationOptions): Observable<HttpInfo<VersionBlogPost>>;
    getPreviousVersion(objectId: string, revisionId: string, _options?: ConfigurationOptions): Observable<VersionBlogPost>;
    getPreviousVersionsWithHttpInfo(objectId: string, after?: string, before?: string, limit?: number, _options?: ConfigurationOptions): Observable<HttpInfo<CollectionResponseWithTotalVersionBlogPost>>;
    getPreviousVersions(objectId: string, after?: string, before?: string, limit?: number, _options?: ConfigurationOptions): Observable<CollectionResponseWithTotalVersionBlogPost>;
    pushLiveWithHttpInfo(objectId: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>>;
    pushLive(objectId: string, _options?: ConfigurationOptions): Observable<void>;
    resetDraftWithHttpInfo(objectId: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>>;
    resetDraft(objectId: string, _options?: ConfigurationOptions): Observable<void>;
    restorePreviousVersionWithHttpInfo(objectId: string, revisionId: string, _options?: ConfigurationOptions): Observable<HttpInfo<BlogPost>>;
    restorePreviousVersion(objectId: string, revisionId: string, _options?: ConfigurationOptions): Observable<BlogPost>;
    restorePreviousVersionToDraftWithHttpInfo(objectId: string, revisionId: number, _options?: ConfigurationOptions): Observable<HttpInfo<BlogPost>>;
    restorePreviousVersionToDraft(objectId: string, revisionId: number, _options?: ConfigurationOptions): Observable<BlogPost>;
    scheduleWithHttpInfo(contentScheduleRequestVNext: ContentScheduleRequestVNext, _options?: ConfigurationOptions): Observable<HttpInfo<void>>;
    schedule(contentScheduleRequestVNext: ContentScheduleRequestVNext, _options?: ConfigurationOptions): Observable<void>;
    updateWithHttpInfo(objectId: string, blogPost: BlogPost, archived?: boolean, _options?: ConfigurationOptions): Observable<HttpInfo<BlogPost>>;
    update(objectId: string, blogPost: BlogPost, archived?: boolean, _options?: ConfigurationOptions): Observable<BlogPost>;
    updateDraftWithHttpInfo(objectId: string, blogPost: BlogPost, _options?: ConfigurationOptions): Observable<HttpInfo<BlogPost>>;
    updateDraft(objectId: string, blogPost: BlogPost, _options?: ConfigurationOptions): Observable<BlogPost>;
}
import { BatchApiRequestFactory, BatchApiResponseProcessor } from "../apis/BatchApi";
export declare class ObservableBatchApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BatchApiRequestFactory, responseProcessor?: BatchApiResponseProcessor);
    archiveWithHttpInfo(batchInputString: BatchInputString, _options?: ConfigurationOptions): Observable<HttpInfo<void>>;
    archive(batchInputString: BatchInputString, _options?: ConfigurationOptions): Observable<void>;
    createWithHttpInfo(batchInputBlogPost: BatchInputBlogPost, _options?: ConfigurationOptions): Observable<HttpInfo<BatchResponseBlogPostWithErrors | BatchResponseBlogPost>>;
    create(batchInputBlogPost: BatchInputBlogPost, _options?: ConfigurationOptions): Observable<BatchResponseBlogPostWithErrors | BatchResponseBlogPost>;
    readWithHttpInfo(batchInputString: BatchInputString, archived?: boolean, _options?: ConfigurationOptions): Observable<HttpInfo<BatchResponseBlogPostWithErrors | BatchResponseBlogPost>>;
    read(batchInputString: BatchInputString, archived?: boolean, _options?: ConfigurationOptions): Observable<BatchResponseBlogPostWithErrors | BatchResponseBlogPost>;
    updateWithHttpInfo(batchInputJsonNode: BatchInputJsonNode, archived?: boolean, _options?: ConfigurationOptions): Observable<HttpInfo<BatchResponseBlogPostWithErrors | BatchResponseBlogPost>>;
    update(batchInputJsonNode: BatchInputJsonNode, archived?: boolean, _options?: ConfigurationOptions): Observable<BatchResponseBlogPostWithErrors | BatchResponseBlogPost>;
}
import { MultiLanguageApiRequestFactory, MultiLanguageApiResponseProcessor } from "../apis/MultiLanguageApi";
export declare class ObservableMultiLanguageApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: MultiLanguageApiRequestFactory, responseProcessor?: MultiLanguageApiResponseProcessor);
    attachToLangGroupWithHttpInfo(attachToLangPrimaryRequestVNext: AttachToLangPrimaryRequestVNext, _options?: ConfigurationOptions): Observable<HttpInfo<void>>;
    attachToLangGroup(attachToLangPrimaryRequestVNext: AttachToLangPrimaryRequestVNext, _options?: ConfigurationOptions): Observable<void>;
    createLangVariationWithHttpInfo(blogPostLanguageCloneRequestVNext: BlogPostLanguageCloneRequestVNext, _options?: ConfigurationOptions): Observable<HttpInfo<BlogPost>>;
    createLangVariation(blogPostLanguageCloneRequestVNext: BlogPostLanguageCloneRequestVNext, _options?: ConfigurationOptions): Observable<BlogPost>;
    detachFromLangGroupWithHttpInfo(detachFromLangGroupRequestVNext: DetachFromLangGroupRequestVNext, _options?: ConfigurationOptions): Observable<HttpInfo<void>>;
    detachFromLangGroup(detachFromLangGroupRequestVNext: DetachFromLangGroupRequestVNext, _options?: ConfigurationOptions): Observable<void>;
    setLangPrimaryWithHttpInfo(setNewLanguagePrimaryRequestVNext: SetNewLanguagePrimaryRequestVNext, _options?: ConfigurationOptions): Observable<HttpInfo<void>>;
    setLangPrimary(setNewLanguagePrimaryRequestVNext: SetNewLanguagePrimaryRequestVNext, _options?: ConfigurationOptions): Observable<void>;
    updateLangsWithHttpInfo(updateLanguagesRequestVNext: UpdateLanguagesRequestVNext, _options?: ConfigurationOptions): Observable<HttpInfo<void>>;
    updateLangs(updateLanguagesRequestVNext: UpdateLanguagesRequestVNext, _options?: ConfigurationOptions): Observable<void>;
}
