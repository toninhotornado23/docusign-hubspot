import { HttpInfo } from '../http/http';
import { Configuration, ConfigurationOptions } from '../configuration';
import { AttachToLangPrimaryRequestVNext } from '../models/AttachToLangPrimaryRequestVNext';
import { BatchInputBlogPost } from '../models/BatchInputBlogPost';
import { BatchInputJsonNode } from '../models/BatchInputJsonNode';
import { BatchInputString } from '../models/BatchInputString';
import { BatchResponseBlogPost } from '../models/BatchResponseBlogPost';
import { BatchResponseBlogPostWithErrors } from '../models/BatchResponseBlogPostWithErrors';
import { BlogPost } from '../models/BlogPost';
import { BlogPostLanguageCloneRequestVNext } from '../models/BlogPostLanguageCloneRequestVNext';
import { CollectionResponseWithTotalBlogPostForwardPaging } from '../models/CollectionResponseWithTotalBlogPostForwardPaging';
import { CollectionResponseWithTotalVersionBlogPost } from '../models/CollectionResponseWithTotalVersionBlogPost';
import { ContentCloneRequestVNext } from '../models/ContentCloneRequestVNext';
import { ContentScheduleRequestVNext } from '../models/ContentScheduleRequestVNext';
import { DetachFromLangGroupRequestVNext } from '../models/DetachFromLangGroupRequestVNext';
import { SetNewLanguagePrimaryRequestVNext } from '../models/SetNewLanguagePrimaryRequestVNext';
import { UpdateLanguagesRequestVNext } from '../models/UpdateLanguagesRequestVNext';
import { VersionBlogPost } from '../models/VersionBlogPost';
import { BasicApiRequestFactory, BasicApiResponseProcessor } from "../apis/BasicApi";
export interface BasicApiArchiveRequest {
    objectId: string;
    archived?: boolean;
}
export interface BasicApiCloneRequest {
    contentCloneRequestVNext: ContentCloneRequestVNext;
}
export interface BasicApiCreateRequest {
    blogPost: BlogPost;
}
export interface BasicApiGetByIdRequest {
    objectId: string;
    archived?: boolean;
    property?: string;
}
export interface BasicApiGetDraftByIdRequest {
    objectId: string;
}
export interface BasicApiGetPageRequest {
    createdAt?: Date;
    createdAfter?: Date;
    createdBefore?: Date;
    updatedAt?: Date;
    updatedAfter?: Date;
    updatedBefore?: Date;
    sort?: Array<string>;
    after?: string;
    limit?: number;
    archived?: boolean;
    property?: string;
}
export interface BasicApiGetPreviousVersionRequest {
    objectId: string;
    revisionId: string;
}
export interface BasicApiGetPreviousVersionsRequest {
    objectId: string;
    after?: string;
    before?: string;
    limit?: number;
}
export interface BasicApiPushLiveRequest {
    objectId: string;
}
export interface BasicApiResetDraftRequest {
    objectId: string;
}
export interface BasicApiRestorePreviousVersionRequest {
    objectId: string;
    revisionId: string;
}
export interface BasicApiRestorePreviousVersionToDraftRequest {
    objectId: string;
    revisionId: number;
}
export interface BasicApiScheduleRequest {
    contentScheduleRequestVNext: ContentScheduleRequestVNext;
}
export interface BasicApiUpdateRequest {
    objectId: string;
    blogPost: BlogPost;
    archived?: boolean;
}
export interface BasicApiUpdateDraftRequest {
    objectId: string;
    blogPost: BlogPost;
}
export declare class ObjectBasicApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BasicApiRequestFactory, responseProcessor?: BasicApiResponseProcessor);
    archiveWithHttpInfo(param: BasicApiArchiveRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    archive(param: BasicApiArchiveRequest, options?: ConfigurationOptions): Promise<void>;
    cloneWithHttpInfo(param: BasicApiCloneRequest, options?: ConfigurationOptions): Promise<HttpInfo<BlogPost>>;
    clone(param: BasicApiCloneRequest, options?: ConfigurationOptions): Promise<BlogPost>;
    createWithHttpInfo(param: BasicApiCreateRequest, options?: ConfigurationOptions): Promise<HttpInfo<BlogPost>>;
    create(param: BasicApiCreateRequest, options?: ConfigurationOptions): Promise<BlogPost>;
    getByIdWithHttpInfo(param: BasicApiGetByIdRequest, options?: ConfigurationOptions): Promise<HttpInfo<BlogPost>>;
    getById(param: BasicApiGetByIdRequest, options?: ConfigurationOptions): Promise<BlogPost>;
    getDraftByIdWithHttpInfo(param: BasicApiGetDraftByIdRequest, options?: ConfigurationOptions): Promise<HttpInfo<BlogPost>>;
    getDraftById(param: BasicApiGetDraftByIdRequest, options?: ConfigurationOptions): Promise<BlogPost>;
    getPageWithHttpInfo(param?: BasicApiGetPageRequest, options?: ConfigurationOptions): Promise<HttpInfo<CollectionResponseWithTotalBlogPostForwardPaging>>;
    getPage(param?: BasicApiGetPageRequest, options?: ConfigurationOptions): Promise<CollectionResponseWithTotalBlogPostForwardPaging>;
    getPreviousVersionWithHttpInfo(param: BasicApiGetPreviousVersionRequest, options?: ConfigurationOptions): Promise<HttpInfo<VersionBlogPost>>;
    getPreviousVersion(param: BasicApiGetPreviousVersionRequest, options?: ConfigurationOptions): Promise<VersionBlogPost>;
    getPreviousVersionsWithHttpInfo(param: BasicApiGetPreviousVersionsRequest, options?: ConfigurationOptions): Promise<HttpInfo<CollectionResponseWithTotalVersionBlogPost>>;
    getPreviousVersions(param: BasicApiGetPreviousVersionsRequest, options?: ConfigurationOptions): Promise<CollectionResponseWithTotalVersionBlogPost>;
    pushLiveWithHttpInfo(param: BasicApiPushLiveRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    pushLive(param: BasicApiPushLiveRequest, options?: ConfigurationOptions): Promise<void>;
    resetDraftWithHttpInfo(param: BasicApiResetDraftRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    resetDraft(param: BasicApiResetDraftRequest, options?: ConfigurationOptions): Promise<void>;
    restorePreviousVersionWithHttpInfo(param: BasicApiRestorePreviousVersionRequest, options?: ConfigurationOptions): Promise<HttpInfo<BlogPost>>;
    restorePreviousVersion(param: BasicApiRestorePreviousVersionRequest, options?: ConfigurationOptions): Promise<BlogPost>;
    restorePreviousVersionToDraftWithHttpInfo(param: BasicApiRestorePreviousVersionToDraftRequest, options?: ConfigurationOptions): Promise<HttpInfo<BlogPost>>;
    restorePreviousVersionToDraft(param: BasicApiRestorePreviousVersionToDraftRequest, options?: ConfigurationOptions): Promise<BlogPost>;
    scheduleWithHttpInfo(param: BasicApiScheduleRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    schedule(param: BasicApiScheduleRequest, options?: ConfigurationOptions): Promise<void>;
    updateWithHttpInfo(param: BasicApiUpdateRequest, options?: ConfigurationOptions): Promise<HttpInfo<BlogPost>>;
    update(param: BasicApiUpdateRequest, options?: ConfigurationOptions): Promise<BlogPost>;
    updateDraftWithHttpInfo(param: BasicApiUpdateDraftRequest, options?: ConfigurationOptions): Promise<HttpInfo<BlogPost>>;
    updateDraft(param: BasicApiUpdateDraftRequest, options?: ConfigurationOptions): Promise<BlogPost>;
}
import { BatchApiRequestFactory, BatchApiResponseProcessor } from "../apis/BatchApi";
export interface BatchApiArchiveRequest {
    batchInputString: BatchInputString;
}
export interface BatchApiCreateRequest {
    batchInputBlogPost: BatchInputBlogPost;
}
export interface BatchApiReadRequest {
    batchInputString: BatchInputString;
    archived?: boolean;
}
export interface BatchApiUpdateRequest {
    batchInputJsonNode: BatchInputJsonNode;
    archived?: boolean;
}
export declare class ObjectBatchApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BatchApiRequestFactory, responseProcessor?: BatchApiResponseProcessor);
    archiveWithHttpInfo(param: BatchApiArchiveRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    archive(param: BatchApiArchiveRequest, options?: ConfigurationOptions): Promise<void>;
    createWithHttpInfo(param: BatchApiCreateRequest, options?: ConfigurationOptions): Promise<HttpInfo<BatchResponseBlogPostWithErrors | BatchResponseBlogPost>>;
    create(param: BatchApiCreateRequest, options?: ConfigurationOptions): Promise<BatchResponseBlogPostWithErrors | BatchResponseBlogPost>;
    readWithHttpInfo(param: BatchApiReadRequest, options?: ConfigurationOptions): Promise<HttpInfo<BatchResponseBlogPostWithErrors | BatchResponseBlogPost>>;
    read(param: BatchApiReadRequest, options?: ConfigurationOptions): Promise<BatchResponseBlogPostWithErrors | BatchResponseBlogPost>;
    updateWithHttpInfo(param: BatchApiUpdateRequest, options?: ConfigurationOptions): Promise<HttpInfo<BatchResponseBlogPostWithErrors | BatchResponseBlogPost>>;
    update(param: BatchApiUpdateRequest, options?: ConfigurationOptions): Promise<BatchResponseBlogPostWithErrors | BatchResponseBlogPost>;
}
import { MultiLanguageApiRequestFactory, MultiLanguageApiResponseProcessor } from "../apis/MultiLanguageApi";
export interface MultiLanguageApiAttachToLangGroupRequest {
    attachToLangPrimaryRequestVNext: AttachToLangPrimaryRequestVNext;
}
export interface MultiLanguageApiCreateLangVariationRequest {
    blogPostLanguageCloneRequestVNext: BlogPostLanguageCloneRequestVNext;
}
export interface MultiLanguageApiDetachFromLangGroupRequest {
    detachFromLangGroupRequestVNext: DetachFromLangGroupRequestVNext;
}
export interface MultiLanguageApiSetLangPrimaryRequest {
    setNewLanguagePrimaryRequestVNext: SetNewLanguagePrimaryRequestVNext;
}
export interface MultiLanguageApiUpdateLangsRequest {
    updateLanguagesRequestVNext: UpdateLanguagesRequestVNext;
}
export declare class ObjectMultiLanguageApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MultiLanguageApiRequestFactory, responseProcessor?: MultiLanguageApiResponseProcessor);
    attachToLangGroupWithHttpInfo(param: MultiLanguageApiAttachToLangGroupRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    attachToLangGroup(param: MultiLanguageApiAttachToLangGroupRequest, options?: ConfigurationOptions): Promise<void>;
    createLangVariationWithHttpInfo(param: MultiLanguageApiCreateLangVariationRequest, options?: ConfigurationOptions): Promise<HttpInfo<BlogPost>>;
    createLangVariation(param: MultiLanguageApiCreateLangVariationRequest, options?: ConfigurationOptions): Promise<BlogPost>;
    detachFromLangGroupWithHttpInfo(param: MultiLanguageApiDetachFromLangGroupRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    detachFromLangGroup(param: MultiLanguageApiDetachFromLangGroupRequest, options?: ConfigurationOptions): Promise<void>;
    setLangPrimaryWithHttpInfo(param: MultiLanguageApiSetLangPrimaryRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    setLangPrimary(param: MultiLanguageApiSetLangPrimaryRequest, options?: ConfigurationOptions): Promise<void>;
    updateLangsWithHttpInfo(param: MultiLanguageApiUpdateLangsRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    updateLangs(param: MultiLanguageApiUpdateLangsRequest, options?: ConfigurationOptions): Promise<void>;
}
