import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext, HttpInfo } from '../http/http';
import { BatchInputBlogPost } from '../models/BatchInputBlogPost';
import { BatchInputJsonNode } from '../models/BatchInputJsonNode';
import { BatchInputString } from '../models/BatchInputString';
import { BatchResponseBlogPost } from '../models/BatchResponseBlogPost';
import { BatchResponseBlogPostWithErrors } from '../models/BatchResponseBlogPostWithErrors';
export declare class BatchApiRequestFactory extends BaseAPIRequestFactory {
    archive(batchInputString: BatchInputString, _options?: Configuration): Promise<RequestContext>;
    create(batchInputBlogPost: BatchInputBlogPost, _options?: Configuration): Promise<RequestContext>;
    read(batchInputString: BatchInputString, archived?: boolean, _options?: Configuration): Promise<RequestContext>;
    update(batchInputJsonNode: BatchInputJsonNode, archived?: boolean, _options?: Configuration): Promise<RequestContext>;
}
export declare class BatchApiResponseProcessor {
    archiveWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    createWithHttpInfo(response: ResponseContext): Promise<HttpInfo<BatchResponseBlogPostWithErrors | BatchResponseBlogPost>>;
    readWithHttpInfo(response: ResponseContext): Promise<HttpInfo<BatchResponseBlogPostWithErrors | BatchResponseBlogPost>>;
    updateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<BatchResponseBlogPostWithErrors | BatchResponseBlogPost>>;
}
