"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectSerializer = void 0;
__exportStar(require("../models/AbTestCreateRequestVNext"), exports);
__exportStar(require("../models/AggregateEmailStatistics"), exports);
__exportStar(require("../models/CollectionResponseWithTotalEmailStatisticIntervalNoPaging"), exports);
__exportStar(require("../models/CollectionResponseWithTotalPublicEmailForwardPaging"), exports);
__exportStar(require("../models/CollectionResponseWithTotalVersionPublicEmail"), exports);
__exportStar(require("../models/ContentCloneRequestVNext"), exports);
__exportStar(require("../models/EmailCreateRequest"), exports);
__exportStar(require("../models/EmailStatisticInterval"), exports);
__exportStar(require("../models/EmailStatisticsData"), exports);
__exportStar(require("../models/EmailUpdateRequest"), exports);
__exportStar(require("../models/ErrorDetail"), exports);
__exportStar(require("../models/ForwardPaging"), exports);
__exportStar(require("../models/Interval"), exports);
__exportStar(require("../models/ModelError"), exports);
__exportStar(require("../models/NextPage"), exports);
__exportStar(require("../models/Paging"), exports);
__exportStar(require("../models/PreviousPage"), exports);
__exportStar(require("../models/PublicButtonStyleSettings"), exports);
__exportStar(require("../models/PublicDividerStyleSettings"), exports);
__exportStar(require("../models/PublicEmail"), exports);
__exportStar(require("../models/PublicEmailContent"), exports);
__exportStar(require("../models/PublicEmailFromDetails"), exports);
__exportStar(require("../models/PublicEmailRecipients"), exports);
__exportStar(require("../models/PublicEmailStyleSettings"), exports);
__exportStar(require("../models/PublicEmailSubscriptionDetails"), exports);
__exportStar(require("../models/PublicEmailTestingDetails"), exports);
__exportStar(require("../models/PublicEmailToDetails"), exports);
__exportStar(require("../models/PublicFontStyle"), exports);
__exportStar(require("../models/PublicRssEmailDetails"), exports);
__exportStar(require("../models/PublicWebversionDetails"), exports);
__exportStar(require("../models/VersionPublicEmail"), exports);
__exportStar(require("../models/VersionUser"), exports);
const AbTestCreateRequestVNext_1 = require("../models/AbTestCreateRequestVNext");
const AggregateEmailStatistics_1 = require("../models/AggregateEmailStatistics");
const CollectionResponseWithTotalEmailStatisticIntervalNoPaging_1 = require("../models/CollectionResponseWithTotalEmailStatisticIntervalNoPaging");
const CollectionResponseWithTotalPublicEmailForwardPaging_1 = require("../models/CollectionResponseWithTotalPublicEmailForwardPaging");
const CollectionResponseWithTotalVersionPublicEmail_1 = require("../models/CollectionResponseWithTotalVersionPublicEmail");
const ContentCloneRequestVNext_1 = require("../models/ContentCloneRequestVNext");
const EmailCreateRequest_1 = require("../models/EmailCreateRequest");
const EmailStatisticInterval_1 = require("../models/EmailStatisticInterval");
const EmailStatisticsData_1 = require("../models/EmailStatisticsData");
const EmailUpdateRequest_1 = require("../models/EmailUpdateRequest");
const ErrorDetail_1 = require("../models/ErrorDetail");
const ForwardPaging_1 = require("../models/ForwardPaging");
const Interval_1 = require("../models/Interval");
const ModelError_1 = require("../models/ModelError");
const NextPage_1 = require("../models/NextPage");
const Paging_1 = require("../models/Paging");
const PreviousPage_1 = require("../models/PreviousPage");
const PublicButtonStyleSettings_1 = require("../models/PublicButtonStyleSettings");
const PublicDividerStyleSettings_1 = require("../models/PublicDividerStyleSettings");
const PublicEmail_1 = require("../models/PublicEmail");
const PublicEmailContent_1 = require("../models/PublicEmailContent");
const PublicEmailFromDetails_1 = require("../models/PublicEmailFromDetails");
const PublicEmailRecipients_1 = require("../models/PublicEmailRecipients");
const PublicEmailStyleSettings_1 = require("../models/PublicEmailStyleSettings");
const PublicEmailSubscriptionDetails_1 = require("../models/PublicEmailSubscriptionDetails");
const PublicEmailTestingDetails_1 = require("../models/PublicEmailTestingDetails");
const PublicEmailToDetails_1 = require("../models/PublicEmailToDetails");
const PublicFontStyle_1 = require("../models/PublicFontStyle");
const PublicRssEmailDetails_1 = require("../models/PublicRssEmailDetails");
const PublicWebversionDetails_1 = require("../models/PublicWebversionDetails");
const VersionPublicEmail_1 = require("../models/VersionPublicEmail");
const VersionUser_1 = require("../models/VersionUser");
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
let enumsMap = new Set([
    "EmailCreateRequestLanguageEnum",
    "EmailCreateRequestStateEnum",
    "EmailCreateRequestSubcategoryEnum",
    "EmailUpdateRequestLanguageEnum",
    "EmailUpdateRequestStateEnum",
    "EmailUpdateRequestSubcategoryEnum",
    "PublicEmailLanguageEnum",
    "PublicEmailTypeEnum",
    "PublicEmailStateEnum",
    "PublicEmailTestingDetailsAbSamplingDefaultEnum",
    "PublicEmailTestingDetailsAbSampleSizeDefaultEnum",
    "PublicEmailTestingDetailsAbStatusEnum",
    "PublicEmailTestingDetailsAbSuccessMetricEnum",
]);
let typeMap = {
    "AbTestCreateRequestVNext": AbTestCreateRequestVNext_1.AbTestCreateRequestVNext,
    "AggregateEmailStatistics": AggregateEmailStatistics_1.AggregateEmailStatistics,
    "CollectionResponseWithTotalEmailStatisticIntervalNoPaging": CollectionResponseWithTotalEmailStatisticIntervalNoPaging_1.CollectionResponseWithTotalEmailStatisticIntervalNoPaging,
    "CollectionResponseWithTotalPublicEmailForwardPaging": CollectionResponseWithTotalPublicEmailForwardPaging_1.CollectionResponseWithTotalPublicEmailForwardPaging,
    "CollectionResponseWithTotalVersionPublicEmail": CollectionResponseWithTotalVersionPublicEmail_1.CollectionResponseWithTotalVersionPublicEmail,
    "ContentCloneRequestVNext": ContentCloneRequestVNext_1.ContentCloneRequestVNext,
    "EmailCreateRequest": EmailCreateRequest_1.EmailCreateRequest,
    "EmailStatisticInterval": EmailStatisticInterval_1.EmailStatisticInterval,
    "EmailStatisticsData": EmailStatisticsData_1.EmailStatisticsData,
    "EmailUpdateRequest": EmailUpdateRequest_1.EmailUpdateRequest,
    "ErrorDetail": ErrorDetail_1.ErrorDetail,
    "ForwardPaging": ForwardPaging_1.ForwardPaging,
    "Interval": Interval_1.Interval,
    "ModelError": ModelError_1.ModelError,
    "NextPage": NextPage_1.NextPage,
    "Paging": Paging_1.Paging,
    "PreviousPage": PreviousPage_1.PreviousPage,
    "PublicButtonStyleSettings": PublicButtonStyleSettings_1.PublicButtonStyleSettings,
    "PublicDividerStyleSettings": PublicDividerStyleSettings_1.PublicDividerStyleSettings,
    "PublicEmail": PublicEmail_1.PublicEmail,
    "PublicEmailContent": PublicEmailContent_1.PublicEmailContent,
    "PublicEmailFromDetails": PublicEmailFromDetails_1.PublicEmailFromDetails,
    "PublicEmailRecipients": PublicEmailRecipients_1.PublicEmailRecipients,
    "PublicEmailStyleSettings": PublicEmailStyleSettings_1.PublicEmailStyleSettings,
    "PublicEmailSubscriptionDetails": PublicEmailSubscriptionDetails_1.PublicEmailSubscriptionDetails,
    "PublicEmailTestingDetails": PublicEmailTestingDetails_1.PublicEmailTestingDetails,
    "PublicEmailToDetails": PublicEmailToDetails_1.PublicEmailToDetails,
    "PublicFontStyle": PublicFontStyle_1.PublicFontStyle,
    "PublicRssEmailDetails": PublicRssEmailDetails_1.PublicRssEmailDetails,
    "PublicWebversionDetails": PublicWebversionDetails_1.PublicWebversionDetails,
    "VersionPublicEmail": VersionPublicEmail_1.VersionPublicEmail,
    "VersionUser": VersionUser_1.VersionUser,
};
const parseMimeType = (mimeType) => {
    const [type = '', subtype = ''] = mimeType.split('/');
    return {
        type,
        subtype,
        subtypeTokens: subtype.split('+'),
    };
};
const mimeTypePredicateFactory = (predicate) => (mimeType) => predicate(parseMimeType(mimeType));
const mimeTypeSimplePredicateFactory = (type, subtype) => mimeTypePredicateFactory((descriptor) => {
    if (descriptor.type !== type)
        return false;
    if (subtype != null && descriptor.subtype !== subtype)
        return false;
    return true;
});
const isTextLikeMimeType = mimeTypeSimplePredicateFactory('text');
const isJsonMimeType = mimeTypeSimplePredicateFactory('application', 'json');
const isJsonLikeMimeType = mimeTypePredicateFactory((descriptor) => descriptor.type === 'application' && descriptor.subtypeTokens.some((item) => item === 'json'));
const isOctetStreamMimeType = mimeTypeSimplePredicateFactory('application', 'octet-stream');
const isFormUrlencodedMimeType = mimeTypeSimplePredicateFactory('application', 'x-www-form-urlencoded');
const supportedMimeTypePredicatesWithPriority = [
    isJsonMimeType,
    isJsonLikeMimeType,
    isTextLikeMimeType,
    isOctetStreamMimeType,
    isFormUrlencodedMimeType,
];
const nullableSuffix = " | null";
const optionalSuffix = " | undefined";
const arrayPrefix = "Array<";
const arraySuffix = ">";
const mapPrefix = "{ [key: string]: ";
const mapSuffix = "; }";
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap.has(expectedType)) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType;
            }
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType;
            }
            else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    let mapping = typeMap[expectedType].mapping;
                    if (mapping != undefined && mapping[discriminatorType]) {
                        return mapping[discriminatorType];
                    }
                    else if (typeMap[discriminatorType]) {
                        return discriminatorType;
                    }
                    else {
                        return expectedType;
                    }
                }
                else {
                    return expectedType;
                }
            }
        }
    }
    static serialize(data, type, format) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.endsWith(nullableSuffix)) {
            let subType = type.slice(0, -nullableSuffix.length);
            return ObjectSerializer.serialize(data, subType, format);
        }
        else if (type.endsWith(optionalSuffix)) {
            let subType = type.slice(0, -optionalSuffix.length);
            return ObjectSerializer.serialize(data, subType, format);
        }
        else if (type.startsWith(arrayPrefix)) {
            let subType = type.slice(arrayPrefix.length, -arraySuffix.length);
            let transformedData = [];
            for (let date of data) {
                transformedData.push(ObjectSerializer.serialize(date, subType, format));
            }
            return transformedData;
        }
        else if (type.startsWith(mapPrefix)) {
            let subType = type.slice(mapPrefix.length, -mapSuffix.length);
            let transformedData = {};
            for (let key in data) {
                transformedData[key] = ObjectSerializer.serialize(data[key], subType, format);
            }
            return transformedData;
        }
        else if (type === "Date") {
            if (format == "date") {
                let month = data.getMonth() + 1;
                month = month < 10 ? "0" + month.toString() : month.toString();
                let day = data.getDate();
                day = day < 10 ? "0" + day.toString() : day.toString();
                return data.getFullYear() + "-" + month + "-" + day;
            }
            else {
                return data.toISOString();
            }
        }
        else {
            if (enumsMap.has(type)) {
                return data;
            }
            if (!typeMap[type]) {
                return data;
            }
            type = this.findCorrectType(data, type);
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let attributeType of attributeTypes) {
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type, attributeType.format);
            }
            return instance;
        }
    }
    static deserialize(data, type, format) {
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.endsWith(nullableSuffix)) {
            let subType = type.slice(0, -nullableSuffix.length);
            return ObjectSerializer.deserialize(data, subType, format);
        }
        else if (type.endsWith(optionalSuffix)) {
            let subType = type.slice(0, -optionalSuffix.length);
            return ObjectSerializer.deserialize(data, subType, format);
        }
        else if (type.startsWith(arrayPrefix)) {
            let subType = type.slice(arrayPrefix.length, -arraySuffix.length);
            let transformedData = [];
            for (let date of data) {
                transformedData.push(ObjectSerializer.deserialize(date, subType, format));
            }
            return transformedData;
        }
        else if (type.startsWith(mapPrefix)) {
            let subType = type.slice(mapPrefix.length, -mapSuffix.length);
            let transformedData = {};
            for (let key in data) {
                transformedData[key] = ObjectSerializer.deserialize(data[key], subType, format);
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap.has(type)) {
                return data;
            }
            if (!typeMap[type]) {
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let attributeType of attributeTypes) {
                let value = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type, attributeType.format);
                if (value !== undefined) {
                    instance[attributeType.name] = value;
                }
            }
            return instance;
        }
    }
    static normalizeMediaType(mediaType) {
        var _a;
        if (mediaType === undefined) {
            return undefined;
        }
        return ((_a = mediaType.split(";")[0]) !== null && _a !== void 0 ? _a : '').trim().toLowerCase();
    }
    static getPreferredMediaType(mediaTypes) {
        if (mediaTypes.length === 0) {
            return "application/json";
        }
        const normalMediaTypes = mediaTypes.map(ObjectSerializer.normalizeMediaType);
        for (const predicate of supportedMimeTypePredicatesWithPriority) {
            for (const mediaType of normalMediaTypes) {
                if (mediaType != null && predicate(mediaType)) {
                    return mediaType;
                }
            }
        }
        throw new Error("None of the given media types are supported: " + mediaTypes.join(", "));
    }
    static stringify(data, mediaType) {
        if (isTextLikeMimeType(mediaType)) {
            return String(data);
        }
        if (isJsonLikeMimeType(mediaType)) {
            return JSON.stringify(data);
        }
        throw new Error("The mediaType " + mediaType + " is not supported by ObjectSerializer.stringify.");
    }
    static parse(rawData, mediaType) {
        if (mediaType === undefined) {
            throw new Error("Cannot parse content. No Content-Type defined.");
        }
        if (isTextLikeMimeType(mediaType)) {
            return rawData;
        }
        if (isJsonLikeMimeType(mediaType)) {
            return JSON.parse(rawData);
        }
        throw new Error("The mediaType " + mediaType + " is not supported by ObjectSerializer.parse.");
    }
}
exports.ObjectSerializer = ObjectSerializer;
//# sourceMappingURL=ObjectSerializer.js.map