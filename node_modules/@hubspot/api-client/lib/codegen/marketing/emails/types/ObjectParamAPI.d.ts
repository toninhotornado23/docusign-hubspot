import { HttpInfo } from '../http/http';
import { Configuration, ConfigurationOptions } from '../configuration';
import { AbTestCreateRequestVNext } from '../models/AbTestCreateRequestVNext';
import { AggregateEmailStatistics } from '../models/AggregateEmailStatistics';
import { CollectionResponseWithTotalEmailStatisticIntervalNoPaging } from '../models/CollectionResponseWithTotalEmailStatisticIntervalNoPaging';
import { CollectionResponseWithTotalPublicEmailForwardPaging } from '../models/CollectionResponseWithTotalPublicEmailForwardPaging';
import { CollectionResponseWithTotalVersionPublicEmail } from '../models/CollectionResponseWithTotalVersionPublicEmail';
import { ContentCloneRequestVNext } from '../models/ContentCloneRequestVNext';
import { EmailCreateRequest } from '../models/EmailCreateRequest';
import { EmailUpdateRequest } from '../models/EmailUpdateRequest';
import { PublicEmail } from '../models/PublicEmail';
import { VersionPublicEmail } from '../models/VersionPublicEmail';
import { MarketingEmailsApiRequestFactory, MarketingEmailsApiResponseProcessor } from "../apis/MarketingEmailsApi";
export interface MarketingEmailsApiArchiveRequest {
    emailId: string;
    archived?: boolean;
}
export interface MarketingEmailsApiCloneRequest {
    contentCloneRequestVNext: ContentCloneRequestVNext;
}
export interface MarketingEmailsApiCreateRequest {
    emailCreateRequest: EmailCreateRequest;
}
export interface MarketingEmailsApiCreateAbTestVariationRequest {
    abTestCreateRequestVNext: AbTestCreateRequestVNext;
}
export interface MarketingEmailsApiGetAbTestVariationRequest {
    emailId: string;
}
export interface MarketingEmailsApiGetByIdRequest {
    emailId: string;
    includeStats?: boolean;
    marketingCampaignNames?: boolean;
    workflowNames?: boolean;
    includedProperties?: Array<string>;
    archived?: boolean;
}
export interface MarketingEmailsApiGetDraftRequest {
    emailId: string;
}
export interface MarketingEmailsApiGetPageRequest {
    createdAt?: Date;
    createdAfter?: Date;
    createdBefore?: Date;
    updatedAt?: Date;
    updatedAfter?: Date;
    updatedBefore?: Date;
    sort?: Array<string>;
    after?: string;
    limit?: number;
    includeStats?: boolean;
    marketingCampaignNames?: boolean;
    workflowNames?: boolean;
    type?: 'AB_EMAIL' | 'BATCH_EMAIL' | 'LOCALTIME_EMAIL' | 'AUTOMATED_AB_EMAIL' | 'BLOG_EMAIL' | 'BLOG_EMAIL_CHILD' | 'RSS_EMAIL' | 'RSS_EMAIL_CHILD' | 'RESUBSCRIBE_EMAIL' | 'OPTIN_EMAIL' | 'OPTIN_FOLLOWUP_EMAIL' | 'AUTOMATED_EMAIL' | 'FEEDBACK_CES_EMAIL' | 'FEEDBACK_CUSTOM_EMAIL' | 'FEEDBACK_CUSTOM_SURVEY_EMAIL' | 'FEEDBACK_NPS_EMAIL' | 'FOLLOWUP_EMAIL' | 'LEADFLOW_EMAIL' | 'SINGLE_SEND_API' | 'MARKETING_SINGLE_SEND_API' | 'SMTP_TOKEN' | 'TICKET_EMAIL' | 'MEMBERSHIP_REGISTRATION_EMAIL' | 'MEMBERSHIP_PASSWORD_SAVED_EMAIL' | 'MEMBERSHIP_PASSWORD_RESET_EMAIL' | 'MEMBERSHIP_EMAIL_VERIFICATION_EMAIL' | 'MEMBERSHIP_PASSWORDLESS_AUTH_EMAIL' | 'MEMBERSHIP_REGISTRATION_FOLLOW_UP_EMAIL' | 'MEMBERSHIP_OTP_LOGIN_EMAIL' | 'MEMBERSHIP_FOLLOW_UP_EMAIL' | 'MEMBERSHIP_VERIFICATION_EMAIL';
    isPublished?: boolean;
    includedProperties?: Array<string>;
    campaign?: string;
    archived?: boolean;
}
export interface MarketingEmailsApiGetRevisionByIdRequest {
    emailId: string;
    revisionId: string;
}
export interface MarketingEmailsApiGetRevisionsRequest {
    emailId: string;
    after?: string;
    before?: string;
    limit?: number;
}
export interface MarketingEmailsApiPublishOrSendRequest {
    emailId: string;
}
export interface MarketingEmailsApiResetDraftRequest {
    emailId: string;
}
export interface MarketingEmailsApiRestoreDraftRevisionRequest {
    emailId: string;
    revisionId: number;
}
export interface MarketingEmailsApiRestoreRevisionRequest {
    emailId: string;
    revisionId: string;
}
export interface MarketingEmailsApiUnpublishOrCancelRequest {
    emailId: string;
}
export interface MarketingEmailsApiUpdateRequest {
    emailId: string;
    emailUpdateRequest: EmailUpdateRequest;
    archived?: boolean;
}
export interface MarketingEmailsApiUpsertDraftRequest {
    emailId: string;
    emailUpdateRequest: EmailUpdateRequest;
}
export declare class ObjectMarketingEmailsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MarketingEmailsApiRequestFactory, responseProcessor?: MarketingEmailsApiResponseProcessor);
    archiveWithHttpInfo(param: MarketingEmailsApiArchiveRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    archive(param: MarketingEmailsApiArchiveRequest, options?: ConfigurationOptions): Promise<void>;
    cloneWithHttpInfo(param: MarketingEmailsApiCloneRequest, options?: ConfigurationOptions): Promise<HttpInfo<PublicEmail>>;
    clone(param: MarketingEmailsApiCloneRequest, options?: ConfigurationOptions): Promise<PublicEmail>;
    createWithHttpInfo(param: MarketingEmailsApiCreateRequest, options?: ConfigurationOptions): Promise<HttpInfo<PublicEmail>>;
    create(param: MarketingEmailsApiCreateRequest, options?: ConfigurationOptions): Promise<PublicEmail>;
    createAbTestVariationWithHttpInfo(param: MarketingEmailsApiCreateAbTestVariationRequest, options?: ConfigurationOptions): Promise<HttpInfo<PublicEmail>>;
    createAbTestVariation(param: MarketingEmailsApiCreateAbTestVariationRequest, options?: ConfigurationOptions): Promise<PublicEmail>;
    getAbTestVariationWithHttpInfo(param: MarketingEmailsApiGetAbTestVariationRequest, options?: ConfigurationOptions): Promise<HttpInfo<PublicEmail>>;
    getAbTestVariation(param: MarketingEmailsApiGetAbTestVariationRequest, options?: ConfigurationOptions): Promise<PublicEmail>;
    getByIdWithHttpInfo(param: MarketingEmailsApiGetByIdRequest, options?: ConfigurationOptions): Promise<HttpInfo<PublicEmail>>;
    getById(param: MarketingEmailsApiGetByIdRequest, options?: ConfigurationOptions): Promise<PublicEmail>;
    getDraftWithHttpInfo(param: MarketingEmailsApiGetDraftRequest, options?: ConfigurationOptions): Promise<HttpInfo<PublicEmail>>;
    getDraft(param: MarketingEmailsApiGetDraftRequest, options?: ConfigurationOptions): Promise<PublicEmail>;
    getPageWithHttpInfo(param?: MarketingEmailsApiGetPageRequest, options?: ConfigurationOptions): Promise<HttpInfo<CollectionResponseWithTotalPublicEmailForwardPaging>>;
    getPage(param?: MarketingEmailsApiGetPageRequest, options?: ConfigurationOptions): Promise<CollectionResponseWithTotalPublicEmailForwardPaging>;
    getRevisionByIdWithHttpInfo(param: MarketingEmailsApiGetRevisionByIdRequest, options?: ConfigurationOptions): Promise<HttpInfo<VersionPublicEmail>>;
    getRevisionById(param: MarketingEmailsApiGetRevisionByIdRequest, options?: ConfigurationOptions): Promise<VersionPublicEmail>;
    getRevisionsWithHttpInfo(param: MarketingEmailsApiGetRevisionsRequest, options?: ConfigurationOptions): Promise<HttpInfo<CollectionResponseWithTotalVersionPublicEmail>>;
    getRevisions(param: MarketingEmailsApiGetRevisionsRequest, options?: ConfigurationOptions): Promise<CollectionResponseWithTotalVersionPublicEmail>;
    publishOrSendWithHttpInfo(param: MarketingEmailsApiPublishOrSendRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    publishOrSend(param: MarketingEmailsApiPublishOrSendRequest, options?: ConfigurationOptions): Promise<void>;
    resetDraftWithHttpInfo(param: MarketingEmailsApiResetDraftRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    resetDraft(param: MarketingEmailsApiResetDraftRequest, options?: ConfigurationOptions): Promise<void>;
    restoreDraftRevisionWithHttpInfo(param: MarketingEmailsApiRestoreDraftRevisionRequest, options?: ConfigurationOptions): Promise<HttpInfo<PublicEmail>>;
    restoreDraftRevision(param: MarketingEmailsApiRestoreDraftRevisionRequest, options?: ConfigurationOptions): Promise<PublicEmail>;
    restoreRevisionWithHttpInfo(param: MarketingEmailsApiRestoreRevisionRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    restoreRevision(param: MarketingEmailsApiRestoreRevisionRequest, options?: ConfigurationOptions): Promise<void>;
    unpublishOrCancelWithHttpInfo(param: MarketingEmailsApiUnpublishOrCancelRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    unpublishOrCancel(param: MarketingEmailsApiUnpublishOrCancelRequest, options?: ConfigurationOptions): Promise<void>;
    updateWithHttpInfo(param: MarketingEmailsApiUpdateRequest, options?: ConfigurationOptions): Promise<HttpInfo<PublicEmail>>;
    update(param: MarketingEmailsApiUpdateRequest, options?: ConfigurationOptions): Promise<PublicEmail>;
    upsertDraftWithHttpInfo(param: MarketingEmailsApiUpsertDraftRequest, options?: ConfigurationOptions): Promise<HttpInfo<PublicEmail>>;
    upsertDraft(param: MarketingEmailsApiUpsertDraftRequest, options?: ConfigurationOptions): Promise<PublicEmail>;
}
import { StatisticsApiRequestFactory, StatisticsApiResponseProcessor } from "../apis/StatisticsApi";
export interface StatisticsApiGetEmailsListRequest {
    startTimestamp?: string;
    endTimestamp?: string;
    emailIds?: Array<number>;
    property?: string;
}
export interface StatisticsApiGetHistogramRequest {
    interval?: 'YEAR' | 'QUARTER' | 'MONTH' | 'WEEK' | 'DAY' | 'HOUR' | 'QUARTER_HOUR' | 'MINUTE' | 'SECOND';
    startTimestamp?: string;
    endTimestamp?: string;
    emailIds?: Array<number>;
}
export declare class ObjectStatisticsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: StatisticsApiRequestFactory, responseProcessor?: StatisticsApiResponseProcessor);
    getEmailsListWithHttpInfo(param?: StatisticsApiGetEmailsListRequest, options?: ConfigurationOptions): Promise<HttpInfo<AggregateEmailStatistics>>;
    getEmailsList(param?: StatisticsApiGetEmailsListRequest, options?: ConfigurationOptions): Promise<AggregateEmailStatistics>;
    getHistogramWithHttpInfo(param?: StatisticsApiGetHistogramRequest, options?: ConfigurationOptions): Promise<HttpInfo<CollectionResponseWithTotalEmailStatisticIntervalNoPaging>>;
    getHistogram(param?: StatisticsApiGetHistogramRequest, options?: ConfigurationOptions): Promise<CollectionResponseWithTotalEmailStatisticIntervalNoPaging>;
}
