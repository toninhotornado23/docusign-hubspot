"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectStatisticsApi = exports.ObjectMarketingEmailsApi = void 0;
const ObservableAPI_1 = require("./ObservableAPI");
class ObjectMarketingEmailsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_1.ObservableMarketingEmailsApi(configuration, requestFactory, responseProcessor);
    }
    archiveWithHttpInfo(param, options) {
        return this.api.archiveWithHttpInfo(param.emailId, param.archived, options).toPromise();
    }
    archive(param, options) {
        return this.api.archive(param.emailId, param.archived, options).toPromise();
    }
    cloneWithHttpInfo(param, options) {
        return this.api.cloneWithHttpInfo(param.contentCloneRequestVNext, options).toPromise();
    }
    clone(param, options) {
        return this.api.clone(param.contentCloneRequestVNext, options).toPromise();
    }
    createWithHttpInfo(param, options) {
        return this.api.createWithHttpInfo(param.emailCreateRequest, options).toPromise();
    }
    create(param, options) {
        return this.api.create(param.emailCreateRequest, options).toPromise();
    }
    createAbTestVariationWithHttpInfo(param, options) {
        return this.api.createAbTestVariationWithHttpInfo(param.abTestCreateRequestVNext, options).toPromise();
    }
    createAbTestVariation(param, options) {
        return this.api.createAbTestVariation(param.abTestCreateRequestVNext, options).toPromise();
    }
    getAbTestVariationWithHttpInfo(param, options) {
        return this.api.getAbTestVariationWithHttpInfo(param.emailId, options).toPromise();
    }
    getAbTestVariation(param, options) {
        return this.api.getAbTestVariation(param.emailId, options).toPromise();
    }
    getByIdWithHttpInfo(param, options) {
        return this.api.getByIdWithHttpInfo(param.emailId, param.includeStats, param.marketingCampaignNames, param.workflowNames, param.includedProperties, param.archived, options).toPromise();
    }
    getById(param, options) {
        return this.api.getById(param.emailId, param.includeStats, param.marketingCampaignNames, param.workflowNames, param.includedProperties, param.archived, options).toPromise();
    }
    getDraftWithHttpInfo(param, options) {
        return this.api.getDraftWithHttpInfo(param.emailId, options).toPromise();
    }
    getDraft(param, options) {
        return this.api.getDraft(param.emailId, options).toPromise();
    }
    getPageWithHttpInfo(param = {}, options) {
        return this.api.getPageWithHttpInfo(param.createdAt, param.createdAfter, param.createdBefore, param.updatedAt, param.updatedAfter, param.updatedBefore, param.sort, param.after, param.limit, param.includeStats, param.marketingCampaignNames, param.workflowNames, param.type, param.isPublished, param.includedProperties, param.campaign, param.archived, options).toPromise();
    }
    getPage(param = {}, options) {
        return this.api.getPage(param.createdAt, param.createdAfter, param.createdBefore, param.updatedAt, param.updatedAfter, param.updatedBefore, param.sort, param.after, param.limit, param.includeStats, param.marketingCampaignNames, param.workflowNames, param.type, param.isPublished, param.includedProperties, param.campaign, param.archived, options).toPromise();
    }
    getRevisionByIdWithHttpInfo(param, options) {
        return this.api.getRevisionByIdWithHttpInfo(param.emailId, param.revisionId, options).toPromise();
    }
    getRevisionById(param, options) {
        return this.api.getRevisionById(param.emailId, param.revisionId, options).toPromise();
    }
    getRevisionsWithHttpInfo(param, options) {
        return this.api.getRevisionsWithHttpInfo(param.emailId, param.after, param.before, param.limit, options).toPromise();
    }
    getRevisions(param, options) {
        return this.api.getRevisions(param.emailId, param.after, param.before, param.limit, options).toPromise();
    }
    publishOrSendWithHttpInfo(param, options) {
        return this.api.publishOrSendWithHttpInfo(param.emailId, options).toPromise();
    }
    publishOrSend(param, options) {
        return this.api.publishOrSend(param.emailId, options).toPromise();
    }
    resetDraftWithHttpInfo(param, options) {
        return this.api.resetDraftWithHttpInfo(param.emailId, options).toPromise();
    }
    resetDraft(param, options) {
        return this.api.resetDraft(param.emailId, options).toPromise();
    }
    restoreDraftRevisionWithHttpInfo(param, options) {
        return this.api.restoreDraftRevisionWithHttpInfo(param.emailId, param.revisionId, options).toPromise();
    }
    restoreDraftRevision(param, options) {
        return this.api.restoreDraftRevision(param.emailId, param.revisionId, options).toPromise();
    }
    restoreRevisionWithHttpInfo(param, options) {
        return this.api.restoreRevisionWithHttpInfo(param.emailId, param.revisionId, options).toPromise();
    }
    restoreRevision(param, options) {
        return this.api.restoreRevision(param.emailId, param.revisionId, options).toPromise();
    }
    unpublishOrCancelWithHttpInfo(param, options) {
        return this.api.unpublishOrCancelWithHttpInfo(param.emailId, options).toPromise();
    }
    unpublishOrCancel(param, options) {
        return this.api.unpublishOrCancel(param.emailId, options).toPromise();
    }
    updateWithHttpInfo(param, options) {
        return this.api.updateWithHttpInfo(param.emailId, param.emailUpdateRequest, param.archived, options).toPromise();
    }
    update(param, options) {
        return this.api.update(param.emailId, param.emailUpdateRequest, param.archived, options).toPromise();
    }
    upsertDraftWithHttpInfo(param, options) {
        return this.api.upsertDraftWithHttpInfo(param.emailId, param.emailUpdateRequest, options).toPromise();
    }
    upsertDraft(param, options) {
        return this.api.upsertDraft(param.emailId, param.emailUpdateRequest, options).toPromise();
    }
}
exports.ObjectMarketingEmailsApi = ObjectMarketingEmailsApi;
const ObservableAPI_2 = require("./ObservableAPI");
class ObjectStatisticsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_2.ObservableStatisticsApi(configuration, requestFactory, responseProcessor);
    }
    getEmailsListWithHttpInfo(param = {}, options) {
        return this.api.getEmailsListWithHttpInfo(param.startTimestamp, param.endTimestamp, param.emailIds, param.property, options).toPromise();
    }
    getEmailsList(param = {}, options) {
        return this.api.getEmailsList(param.startTimestamp, param.endTimestamp, param.emailIds, param.property, options).toPromise();
    }
    getHistogramWithHttpInfo(param = {}, options) {
        return this.api.getHistogramWithHttpInfo(param.interval, param.startTimestamp, param.endTimestamp, param.emailIds, options).toPromise();
    }
    getHistogram(param = {}, options) {
        return this.api.getHistogram(param.interval, param.startTimestamp, param.endTimestamp, param.emailIds, options).toPromise();
    }
}
exports.ObjectStatisticsApi = ObjectStatisticsApi;
//# sourceMappingURL=ObjectParamAPI.js.map