import { HttpInfo } from '../http/http';
import { Configuration, ConfigurationOptions } from '../configuration';
import { Observable } from '../rxjsStub';
import { AbTestCreateRequestVNext } from '../models/AbTestCreateRequestVNext';
import { AggregateEmailStatistics } from '../models/AggregateEmailStatistics';
import { CollectionResponseWithTotalEmailStatisticIntervalNoPaging } from '../models/CollectionResponseWithTotalEmailStatisticIntervalNoPaging';
import { CollectionResponseWithTotalPublicEmailForwardPaging } from '../models/CollectionResponseWithTotalPublicEmailForwardPaging';
import { CollectionResponseWithTotalVersionPublicEmail } from '../models/CollectionResponseWithTotalVersionPublicEmail';
import { ContentCloneRequestVNext } from '../models/ContentCloneRequestVNext';
import { EmailCreateRequest } from '../models/EmailCreateRequest';
import { EmailUpdateRequest } from '../models/EmailUpdateRequest';
import { PublicEmail } from '../models/PublicEmail';
import { VersionPublicEmail } from '../models/VersionPublicEmail';
import { MarketingEmailsApiRequestFactory, MarketingEmailsApiResponseProcessor } from "../apis/MarketingEmailsApi";
export declare class ObservableMarketingEmailsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: MarketingEmailsApiRequestFactory, responseProcessor?: MarketingEmailsApiResponseProcessor);
    archiveWithHttpInfo(emailId: string, archived?: boolean, _options?: ConfigurationOptions): Observable<HttpInfo<void>>;
    archive(emailId: string, archived?: boolean, _options?: ConfigurationOptions): Observable<void>;
    cloneWithHttpInfo(contentCloneRequestVNext: ContentCloneRequestVNext, _options?: ConfigurationOptions): Observable<HttpInfo<PublicEmail>>;
    clone(contentCloneRequestVNext: ContentCloneRequestVNext, _options?: ConfigurationOptions): Observable<PublicEmail>;
    createWithHttpInfo(emailCreateRequest: EmailCreateRequest, _options?: ConfigurationOptions): Observable<HttpInfo<PublicEmail>>;
    create(emailCreateRequest: EmailCreateRequest, _options?: ConfigurationOptions): Observable<PublicEmail>;
    createAbTestVariationWithHttpInfo(abTestCreateRequestVNext: AbTestCreateRequestVNext, _options?: ConfigurationOptions): Observable<HttpInfo<PublicEmail>>;
    createAbTestVariation(abTestCreateRequestVNext: AbTestCreateRequestVNext, _options?: ConfigurationOptions): Observable<PublicEmail>;
    getAbTestVariationWithHttpInfo(emailId: string, _options?: ConfigurationOptions): Observable<HttpInfo<PublicEmail>>;
    getAbTestVariation(emailId: string, _options?: ConfigurationOptions): Observable<PublicEmail>;
    getByIdWithHttpInfo(emailId: string, includeStats?: boolean, marketingCampaignNames?: boolean, workflowNames?: boolean, includedProperties?: Array<string>, archived?: boolean, _options?: ConfigurationOptions): Observable<HttpInfo<PublicEmail>>;
    getById(emailId: string, includeStats?: boolean, marketingCampaignNames?: boolean, workflowNames?: boolean, includedProperties?: Array<string>, archived?: boolean, _options?: ConfigurationOptions): Observable<PublicEmail>;
    getDraftWithHttpInfo(emailId: string, _options?: ConfigurationOptions): Observable<HttpInfo<PublicEmail>>;
    getDraft(emailId: string, _options?: ConfigurationOptions): Observable<PublicEmail>;
    getPageWithHttpInfo(createdAt?: Date, createdAfter?: Date, createdBefore?: Date, updatedAt?: Date, updatedAfter?: Date, updatedBefore?: Date, sort?: Array<string>, after?: string, limit?: number, includeStats?: boolean, marketingCampaignNames?: boolean, workflowNames?: boolean, type?: 'AB_EMAIL' | 'BATCH_EMAIL' | 'LOCALTIME_EMAIL' | 'AUTOMATED_AB_EMAIL' | 'BLOG_EMAIL' | 'BLOG_EMAIL_CHILD' | 'RSS_EMAIL' | 'RSS_EMAIL_CHILD' | 'RESUBSCRIBE_EMAIL' | 'OPTIN_EMAIL' | 'OPTIN_FOLLOWUP_EMAIL' | 'AUTOMATED_EMAIL' | 'FEEDBACK_CES_EMAIL' | 'FEEDBACK_CUSTOM_EMAIL' | 'FEEDBACK_CUSTOM_SURVEY_EMAIL' | 'FEEDBACK_NPS_EMAIL' | 'FOLLOWUP_EMAIL' | 'LEADFLOW_EMAIL' | 'SINGLE_SEND_API' | 'MARKETING_SINGLE_SEND_API' | 'SMTP_TOKEN' | 'TICKET_EMAIL' | 'MEMBERSHIP_REGISTRATION_EMAIL' | 'MEMBERSHIP_PASSWORD_SAVED_EMAIL' | 'MEMBERSHIP_PASSWORD_RESET_EMAIL' | 'MEMBERSHIP_EMAIL_VERIFICATION_EMAIL' | 'MEMBERSHIP_PASSWORDLESS_AUTH_EMAIL' | 'MEMBERSHIP_REGISTRATION_FOLLOW_UP_EMAIL' | 'MEMBERSHIP_OTP_LOGIN_EMAIL' | 'MEMBERSHIP_FOLLOW_UP_EMAIL' | 'MEMBERSHIP_VERIFICATION_EMAIL', isPublished?: boolean, includedProperties?: Array<string>, campaign?: string, archived?: boolean, _options?: ConfigurationOptions): Observable<HttpInfo<CollectionResponseWithTotalPublicEmailForwardPaging>>;
    getPage(createdAt?: Date, createdAfter?: Date, createdBefore?: Date, updatedAt?: Date, updatedAfter?: Date, updatedBefore?: Date, sort?: Array<string>, after?: string, limit?: number, includeStats?: boolean, marketingCampaignNames?: boolean, workflowNames?: boolean, type?: 'AB_EMAIL' | 'BATCH_EMAIL' | 'LOCALTIME_EMAIL' | 'AUTOMATED_AB_EMAIL' | 'BLOG_EMAIL' | 'BLOG_EMAIL_CHILD' | 'RSS_EMAIL' | 'RSS_EMAIL_CHILD' | 'RESUBSCRIBE_EMAIL' | 'OPTIN_EMAIL' | 'OPTIN_FOLLOWUP_EMAIL' | 'AUTOMATED_EMAIL' | 'FEEDBACK_CES_EMAIL' | 'FEEDBACK_CUSTOM_EMAIL' | 'FEEDBACK_CUSTOM_SURVEY_EMAIL' | 'FEEDBACK_NPS_EMAIL' | 'FOLLOWUP_EMAIL' | 'LEADFLOW_EMAIL' | 'SINGLE_SEND_API' | 'MARKETING_SINGLE_SEND_API' | 'SMTP_TOKEN' | 'TICKET_EMAIL' | 'MEMBERSHIP_REGISTRATION_EMAIL' | 'MEMBERSHIP_PASSWORD_SAVED_EMAIL' | 'MEMBERSHIP_PASSWORD_RESET_EMAIL' | 'MEMBERSHIP_EMAIL_VERIFICATION_EMAIL' | 'MEMBERSHIP_PASSWORDLESS_AUTH_EMAIL' | 'MEMBERSHIP_REGISTRATION_FOLLOW_UP_EMAIL' | 'MEMBERSHIP_OTP_LOGIN_EMAIL' | 'MEMBERSHIP_FOLLOW_UP_EMAIL' | 'MEMBERSHIP_VERIFICATION_EMAIL', isPublished?: boolean, includedProperties?: Array<string>, campaign?: string, archived?: boolean, _options?: ConfigurationOptions): Observable<CollectionResponseWithTotalPublicEmailForwardPaging>;
    getRevisionByIdWithHttpInfo(emailId: string, revisionId: string, _options?: ConfigurationOptions): Observable<HttpInfo<VersionPublicEmail>>;
    getRevisionById(emailId: string, revisionId: string, _options?: ConfigurationOptions): Observable<VersionPublicEmail>;
    getRevisionsWithHttpInfo(emailId: string, after?: string, before?: string, limit?: number, _options?: ConfigurationOptions): Observable<HttpInfo<CollectionResponseWithTotalVersionPublicEmail>>;
    getRevisions(emailId: string, after?: string, before?: string, limit?: number, _options?: ConfigurationOptions): Observable<CollectionResponseWithTotalVersionPublicEmail>;
    publishOrSendWithHttpInfo(emailId: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>>;
    publishOrSend(emailId: string, _options?: ConfigurationOptions): Observable<void>;
    resetDraftWithHttpInfo(emailId: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>>;
    resetDraft(emailId: string, _options?: ConfigurationOptions): Observable<void>;
    restoreDraftRevisionWithHttpInfo(emailId: string, revisionId: number, _options?: ConfigurationOptions): Observable<HttpInfo<PublicEmail>>;
    restoreDraftRevision(emailId: string, revisionId: number, _options?: ConfigurationOptions): Observable<PublicEmail>;
    restoreRevisionWithHttpInfo(emailId: string, revisionId: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>>;
    restoreRevision(emailId: string, revisionId: string, _options?: ConfigurationOptions): Observable<void>;
    unpublishOrCancelWithHttpInfo(emailId: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>>;
    unpublishOrCancel(emailId: string, _options?: ConfigurationOptions): Observable<void>;
    updateWithHttpInfo(emailId: string, emailUpdateRequest: EmailUpdateRequest, archived?: boolean, _options?: ConfigurationOptions): Observable<HttpInfo<PublicEmail>>;
    update(emailId: string, emailUpdateRequest: EmailUpdateRequest, archived?: boolean, _options?: ConfigurationOptions): Observable<PublicEmail>;
    upsertDraftWithHttpInfo(emailId: string, emailUpdateRequest: EmailUpdateRequest, _options?: ConfigurationOptions): Observable<HttpInfo<PublicEmail>>;
    upsertDraft(emailId: string, emailUpdateRequest: EmailUpdateRequest, _options?: ConfigurationOptions): Observable<PublicEmail>;
}
import { StatisticsApiRequestFactory, StatisticsApiResponseProcessor } from "../apis/StatisticsApi";
export declare class ObservableStatisticsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: StatisticsApiRequestFactory, responseProcessor?: StatisticsApiResponseProcessor);
    getEmailsListWithHttpInfo(startTimestamp?: string, endTimestamp?: string, emailIds?: Array<number>, property?: string, _options?: ConfigurationOptions): Observable<HttpInfo<AggregateEmailStatistics>>;
    getEmailsList(startTimestamp?: string, endTimestamp?: string, emailIds?: Array<number>, property?: string, _options?: ConfigurationOptions): Observable<AggregateEmailStatistics>;
    getHistogramWithHttpInfo(interval?: 'YEAR' | 'QUARTER' | 'MONTH' | 'WEEK' | 'DAY' | 'HOUR' | 'QUARTER_HOUR' | 'MINUTE' | 'SECOND', startTimestamp?: string, endTimestamp?: string, emailIds?: Array<number>, _options?: ConfigurationOptions): Observable<HttpInfo<CollectionResponseWithTotalEmailStatisticIntervalNoPaging>>;
    getHistogram(interval?: 'YEAR' | 'QUARTER' | 'MONTH' | 'WEEK' | 'DAY' | 'HOUR' | 'QUARTER_HOUR' | 'MINUTE' | 'SECOND', startTimestamp?: string, endTimestamp?: string, emailIds?: Array<number>, _options?: ConfigurationOptions): Observable<CollectionResponseWithTotalEmailStatisticIntervalNoPaging>;
}
