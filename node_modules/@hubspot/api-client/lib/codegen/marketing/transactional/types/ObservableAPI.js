"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservableSingleSendApi = exports.ObservablePublicSMTPTokensApi = void 0;
const rxjsStub_1 = require("../rxjsStub");
const rxjsStub_2 = require("../rxjsStub");
const PublicSMTPTokensApi_1 = require("../apis/PublicSMTPTokensApi");
class ObservablePublicSMTPTokensApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new PublicSMTPTokensApi_1.PublicSMTPTokensApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new PublicSMTPTokensApi_1.PublicSMTPTokensApiResponseProcessor();
    }
    archiveTokenWithHttpInfo(tokenId, _options) {
        let _config = this.configuration;
        let allMiddleware = [];
        if (_options && _options.middleware) {
            const middlewareMergeStrategy = _options.middlewareMergeStrategy || 'replace';
            const calltimeMiddleware = _options.middleware;
            switch (middlewareMergeStrategy) {
                case 'append':
                    allMiddleware = this.configuration.middleware.concat(calltimeMiddleware);
                    break;
                case 'prepend':
                    allMiddleware = calltimeMiddleware.concat(this.configuration.middleware);
                    break;
                case 'replace':
                    allMiddleware = calltimeMiddleware;
                    break;
                default:
                    throw new Error(`unrecognized middleware merge strategy '${middlewareMergeStrategy}'`);
            }
        }
        if (_options) {
            _config = {
                baseServer: _options.baseServer || this.configuration.baseServer,
                httpApi: _options.httpApi || this.configuration.httpApi,
                authMethods: _options.authMethods || this.configuration.authMethods,
                middleware: allMiddleware || this.configuration.middleware
            };
        }
        const requestContextPromise = this.requestFactory.archiveToken(tokenId, _config);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of allMiddleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of allMiddleware.reverse()) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.archiveTokenWithHttpInfo(rsp)));
        }));
    }
    archiveToken(tokenId, _options) {
        return this.archiveTokenWithHttpInfo(tokenId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    createTokenWithHttpInfo(smtpApiTokenRequestEgg, _options) {
        let _config = this.configuration;
        let allMiddleware = [];
        if (_options && _options.middleware) {
            const middlewareMergeStrategy = _options.middlewareMergeStrategy || 'replace';
            const calltimeMiddleware = _options.middleware;
            switch (middlewareMergeStrategy) {
                case 'append':
                    allMiddleware = this.configuration.middleware.concat(calltimeMiddleware);
                    break;
                case 'prepend':
                    allMiddleware = calltimeMiddleware.concat(this.configuration.middleware);
                    break;
                case 'replace':
                    allMiddleware = calltimeMiddleware;
                    break;
                default:
                    throw new Error(`unrecognized middleware merge strategy '${middlewareMergeStrategy}'`);
            }
        }
        if (_options) {
            _config = {
                baseServer: _options.baseServer || this.configuration.baseServer,
                httpApi: _options.httpApi || this.configuration.httpApi,
                authMethods: _options.authMethods || this.configuration.authMethods,
                middleware: allMiddleware || this.configuration.middleware
            };
        }
        const requestContextPromise = this.requestFactory.createToken(smtpApiTokenRequestEgg, _config);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of allMiddleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of allMiddleware.reverse()) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.createTokenWithHttpInfo(rsp)));
        }));
    }
    createToken(smtpApiTokenRequestEgg, _options) {
        return this.createTokenWithHttpInfo(smtpApiTokenRequestEgg, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    getTokenByIdWithHttpInfo(tokenId, _options) {
        let _config = this.configuration;
        let allMiddleware = [];
        if (_options && _options.middleware) {
            const middlewareMergeStrategy = _options.middlewareMergeStrategy || 'replace';
            const calltimeMiddleware = _options.middleware;
            switch (middlewareMergeStrategy) {
                case 'append':
                    allMiddleware = this.configuration.middleware.concat(calltimeMiddleware);
                    break;
                case 'prepend':
                    allMiddleware = calltimeMiddleware.concat(this.configuration.middleware);
                    break;
                case 'replace':
                    allMiddleware = calltimeMiddleware;
                    break;
                default:
                    throw new Error(`unrecognized middleware merge strategy '${middlewareMergeStrategy}'`);
            }
        }
        if (_options) {
            _config = {
                baseServer: _options.baseServer || this.configuration.baseServer,
                httpApi: _options.httpApi || this.configuration.httpApi,
                authMethods: _options.authMethods || this.configuration.authMethods,
                middleware: allMiddleware || this.configuration.middleware
            };
        }
        const requestContextPromise = this.requestFactory.getTokenById(tokenId, _config);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of allMiddleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of allMiddleware.reverse()) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.getTokenByIdWithHttpInfo(rsp)));
        }));
    }
    getTokenById(tokenId, _options) {
        return this.getTokenByIdWithHttpInfo(tokenId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    getTokensPageWithHttpInfo(campaignName, emailCampaignId, after, limit, _options) {
        let _config = this.configuration;
        let allMiddleware = [];
        if (_options && _options.middleware) {
            const middlewareMergeStrategy = _options.middlewareMergeStrategy || 'replace';
            const calltimeMiddleware = _options.middleware;
            switch (middlewareMergeStrategy) {
                case 'append':
                    allMiddleware = this.configuration.middleware.concat(calltimeMiddleware);
                    break;
                case 'prepend':
                    allMiddleware = calltimeMiddleware.concat(this.configuration.middleware);
                    break;
                case 'replace':
                    allMiddleware = calltimeMiddleware;
                    break;
                default:
                    throw new Error(`unrecognized middleware merge strategy '${middlewareMergeStrategy}'`);
            }
        }
        if (_options) {
            _config = {
                baseServer: _options.baseServer || this.configuration.baseServer,
                httpApi: _options.httpApi || this.configuration.httpApi,
                authMethods: _options.authMethods || this.configuration.authMethods,
                middleware: allMiddleware || this.configuration.middleware
            };
        }
        const requestContextPromise = this.requestFactory.getTokensPage(campaignName, emailCampaignId, after, limit, _config);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of allMiddleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of allMiddleware.reverse()) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.getTokensPageWithHttpInfo(rsp)));
        }));
    }
    getTokensPage(campaignName, emailCampaignId, after, limit, _options) {
        return this.getTokensPageWithHttpInfo(campaignName, emailCampaignId, after, limit, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    resetPasswordWithHttpInfo(tokenId, _options) {
        let _config = this.configuration;
        let allMiddleware = [];
        if (_options && _options.middleware) {
            const middlewareMergeStrategy = _options.middlewareMergeStrategy || 'replace';
            const calltimeMiddleware = _options.middleware;
            switch (middlewareMergeStrategy) {
                case 'append':
                    allMiddleware = this.configuration.middleware.concat(calltimeMiddleware);
                    break;
                case 'prepend':
                    allMiddleware = calltimeMiddleware.concat(this.configuration.middleware);
                    break;
                case 'replace':
                    allMiddleware = calltimeMiddleware;
                    break;
                default:
                    throw new Error(`unrecognized middleware merge strategy '${middlewareMergeStrategy}'`);
            }
        }
        if (_options) {
            _config = {
                baseServer: _options.baseServer || this.configuration.baseServer,
                httpApi: _options.httpApi || this.configuration.httpApi,
                authMethods: _options.authMethods || this.configuration.authMethods,
                middleware: allMiddleware || this.configuration.middleware
            };
        }
        const requestContextPromise = this.requestFactory.resetPassword(tokenId, _config);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of allMiddleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of allMiddleware.reverse()) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.resetPasswordWithHttpInfo(rsp)));
        }));
    }
    resetPassword(tokenId, _options) {
        return this.resetPasswordWithHttpInfo(tokenId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
}
exports.ObservablePublicSMTPTokensApi = ObservablePublicSMTPTokensApi;
const SingleSendApi_1 = require("../apis/SingleSendApi");
class ObservableSingleSendApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new SingleSendApi_1.SingleSendApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new SingleSendApi_1.SingleSendApiResponseProcessor();
    }
    sendEmailWithHttpInfo(publicSingleSendRequestEgg, _options) {
        let _config = this.configuration;
        let allMiddleware = [];
        if (_options && _options.middleware) {
            const middlewareMergeStrategy = _options.middlewareMergeStrategy || 'replace';
            const calltimeMiddleware = _options.middleware;
            switch (middlewareMergeStrategy) {
                case 'append':
                    allMiddleware = this.configuration.middleware.concat(calltimeMiddleware);
                    break;
                case 'prepend':
                    allMiddleware = calltimeMiddleware.concat(this.configuration.middleware);
                    break;
                case 'replace':
                    allMiddleware = calltimeMiddleware;
                    break;
                default:
                    throw new Error(`unrecognized middleware merge strategy '${middlewareMergeStrategy}'`);
            }
        }
        if (_options) {
            _config = {
                baseServer: _options.baseServer || this.configuration.baseServer,
                httpApi: _options.httpApi || this.configuration.httpApi,
                authMethods: _options.authMethods || this.configuration.authMethods,
                middleware: allMiddleware || this.configuration.middleware
            };
        }
        const requestContextPromise = this.requestFactory.sendEmail(publicSingleSendRequestEgg, _config);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of allMiddleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of allMiddleware.reverse()) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.sendEmailWithHttpInfo(rsp)));
        }));
    }
    sendEmail(publicSingleSendRequestEgg, _options) {
        return this.sendEmailWithHttpInfo(publicSingleSendRequestEgg, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
}
exports.ObservableSingleSendApi = ObservableSingleSendApi;
//# sourceMappingURL=ObservableAPI.js.map