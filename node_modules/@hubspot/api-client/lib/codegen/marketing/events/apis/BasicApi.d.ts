import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext, HttpInfo } from '../http/http';
import { CollectionResponseMarketingEventPublicReadResponseV2ForwardPaging } from '../models/CollectionResponseMarketingEventPublicReadResponseV2ForwardPaging';
import { MarketingEventCreateRequestParams } from '../models/MarketingEventCreateRequestParams';
import { MarketingEventDefaultResponse } from '../models/MarketingEventDefaultResponse';
import { MarketingEventPublicDefaultResponse } from '../models/MarketingEventPublicDefaultResponse';
import { MarketingEventPublicDefaultResponseV2 } from '../models/MarketingEventPublicDefaultResponseV2';
import { MarketingEventPublicReadResponse } from '../models/MarketingEventPublicReadResponse';
import { MarketingEventPublicReadResponseV2 } from '../models/MarketingEventPublicReadResponseV2';
import { MarketingEventPublicUpdateRequestV2 } from '../models/MarketingEventPublicUpdateRequestV2';
import { MarketingEventUpdateRequestParams } from '../models/MarketingEventUpdateRequestParams';
export declare class BasicApiRequestFactory extends BaseAPIRequestFactory {
    archive(externalEventId: string, externalAccountId: string, _options?: Configuration): Promise<RequestContext>;
    archiveByObjectId(objectId: string, _options?: Configuration): Promise<RequestContext>;
    create(marketingEventCreateRequestParams: MarketingEventCreateRequestParams, _options?: Configuration): Promise<RequestContext>;
    getAll(after?: string, limit?: number, _options?: Configuration): Promise<RequestContext>;
    getByObjectId(objectId: string, _options?: Configuration): Promise<RequestContext>;
    getDetails(externalEventId: string, externalAccountId: string, _options?: Configuration): Promise<RequestContext>;
    update(externalEventId: string, externalAccountId: string, marketingEventUpdateRequestParams: MarketingEventUpdateRequestParams, _options?: Configuration): Promise<RequestContext>;
    updateByObjectId(objectId: string, marketingEventPublicUpdateRequestV2: MarketingEventPublicUpdateRequestV2, _options?: Configuration): Promise<RequestContext>;
    upsert(externalEventId: string, marketingEventCreateRequestParams: MarketingEventCreateRequestParams, _options?: Configuration): Promise<RequestContext>;
}
export declare class BasicApiResponseProcessor {
    archiveWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    archiveByObjectIdWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    createWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MarketingEventDefaultResponse>>;
    getAllWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CollectionResponseMarketingEventPublicReadResponseV2ForwardPaging>>;
    getByObjectIdWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MarketingEventPublicReadResponseV2>>;
    getDetailsWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MarketingEventPublicReadResponse>>;
    updateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MarketingEventPublicDefaultResponse>>;
    updateByObjectIdWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MarketingEventPublicDefaultResponseV2>>;
    upsertWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MarketingEventPublicDefaultResponse>>;
}
