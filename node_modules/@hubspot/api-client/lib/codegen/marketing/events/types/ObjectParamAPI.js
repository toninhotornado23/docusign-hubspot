"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectSubscriberStateChangesApi = exports.ObjectSettingsApi = exports.ObjectRetrieveParticipantStateApi = exports.ObjectListAssociationsApi = exports.ObjectIdentifiersApi = exports.ObjectChangePropertyApi = exports.ObjectBatchApi = exports.ObjectBasicApi = exports.ObjectAddEventAttendeesApi = void 0;
const ObservableAPI_1 = require("./ObservableAPI");
class ObjectAddEventAttendeesApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_1.ObservableAddEventAttendeesApi(configuration, requestFactory, responseProcessor);
    }
    recordByContactEmailsWithHttpInfo(param, options) {
        return this.api.recordByContactEmailsWithHttpInfo(param.externalEventId, param.subscriberState, param.batchInputMarketingEventEmailSubscriber, param.externalAccountId, options).toPromise();
    }
    recordByContactEmails(param, options) {
        return this.api.recordByContactEmails(param.externalEventId, param.subscriberState, param.batchInputMarketingEventEmailSubscriber, param.externalAccountId, options).toPromise();
    }
    recordByContactIdWithHttpInfo(param, options) {
        return this.api.recordByContactIdWithHttpInfo(param.objectId, param.subscriberState, param.batchInputMarketingEventSubscriber, options).toPromise();
    }
    recordByContactId(param, options) {
        return this.api.recordByContactId(param.objectId, param.subscriberState, param.batchInputMarketingEventSubscriber, options).toPromise();
    }
    recordByContactIdsWithHttpInfo(param, options) {
        return this.api.recordByContactIdsWithHttpInfo(param.externalEventId, param.subscriberState, param.batchInputMarketingEventSubscriber, param.externalAccountId, options).toPromise();
    }
    recordByContactIds(param, options) {
        return this.api.recordByContactIds(param.externalEventId, param.subscriberState, param.batchInputMarketingEventSubscriber, param.externalAccountId, options).toPromise();
    }
    recordByEmailWithHttpInfo(param, options) {
        return this.api.recordByEmailWithHttpInfo(param.objectId, param.subscriberState, param.batchInputMarketingEventEmailSubscriber, options).toPromise();
    }
    recordByEmail(param, options) {
        return this.api.recordByEmail(param.objectId, param.subscriberState, param.batchInputMarketingEventEmailSubscriber, options).toPromise();
    }
}
exports.ObjectAddEventAttendeesApi = ObjectAddEventAttendeesApi;
const ObservableAPI_2 = require("./ObservableAPI");
class ObjectBasicApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_2.ObservableBasicApi(configuration, requestFactory, responseProcessor);
    }
    archiveWithHttpInfo(param, options) {
        return this.api.archiveWithHttpInfo(param.externalEventId, param.externalAccountId, options).toPromise();
    }
    archive(param, options) {
        return this.api.archive(param.externalEventId, param.externalAccountId, options).toPromise();
    }
    archiveByObjectIdWithHttpInfo(param, options) {
        return this.api.archiveByObjectIdWithHttpInfo(param.objectId, options).toPromise();
    }
    archiveByObjectId(param, options) {
        return this.api.archiveByObjectId(param.objectId, options).toPromise();
    }
    createWithHttpInfo(param, options) {
        return this.api.createWithHttpInfo(param.marketingEventCreateRequestParams, options).toPromise();
    }
    create(param, options) {
        return this.api.create(param.marketingEventCreateRequestParams, options).toPromise();
    }
    getAllWithHttpInfo(param = {}, options) {
        return this.api.getAllWithHttpInfo(param.after, param.limit, options).toPromise();
    }
    getAll(param = {}, options) {
        return this.api.getAll(param.after, param.limit, options).toPromise();
    }
    getByObjectIdWithHttpInfo(param, options) {
        return this.api.getByObjectIdWithHttpInfo(param.objectId, options).toPromise();
    }
    getByObjectId(param, options) {
        return this.api.getByObjectId(param.objectId, options).toPromise();
    }
    getDetailsWithHttpInfo(param, options) {
        return this.api.getDetailsWithHttpInfo(param.externalEventId, param.externalAccountId, options).toPromise();
    }
    getDetails(param, options) {
        return this.api.getDetails(param.externalEventId, param.externalAccountId, options).toPromise();
    }
    updateWithHttpInfo(param, options) {
        return this.api.updateWithHttpInfo(param.externalEventId, param.externalAccountId, param.marketingEventUpdateRequestParams, options).toPromise();
    }
    update(param, options) {
        return this.api.update(param.externalEventId, param.externalAccountId, param.marketingEventUpdateRequestParams, options).toPromise();
    }
    updateByObjectIdWithHttpInfo(param, options) {
        return this.api.updateByObjectIdWithHttpInfo(param.objectId, param.marketingEventPublicUpdateRequestV2, options).toPromise();
    }
    updateByObjectId(param, options) {
        return this.api.updateByObjectId(param.objectId, param.marketingEventPublicUpdateRequestV2, options).toPromise();
    }
    upsertWithHttpInfo(param, options) {
        return this.api.upsertWithHttpInfo(param.externalEventId, param.marketingEventCreateRequestParams, options).toPromise();
    }
    upsert(param, options) {
        return this.api.upsert(param.externalEventId, param.marketingEventCreateRequestParams, options).toPromise();
    }
}
exports.ObjectBasicApi = ObjectBasicApi;
const ObservableAPI_3 = require("./ObservableAPI");
class ObjectBatchApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_3.ObservableBatchApi(configuration, requestFactory, responseProcessor);
    }
    archiveWithHttpInfo(param, options) {
        return this.api.archiveWithHttpInfo(param.batchInputMarketingEventExternalUniqueIdentifier, options).toPromise();
    }
    archive(param, options) {
        return this.api.archive(param.batchInputMarketingEventExternalUniqueIdentifier, options).toPromise();
    }
    archiveByObjectIdWithHttpInfo(param, options) {
        return this.api.archiveByObjectIdWithHttpInfo(param.batchInputMarketingEventPublicObjectIdDeleteRequest, options).toPromise();
    }
    archiveByObjectId(param, options) {
        return this.api.archiveByObjectId(param.batchInputMarketingEventPublicObjectIdDeleteRequest, options).toPromise();
    }
    updateByObjectIdWithHttpInfo(param, options) {
        return this.api.updateByObjectIdWithHttpInfo(param.batchInputMarketingEventPublicUpdateRequestFullV2, options).toPromise();
    }
    updateByObjectId(param, options) {
        return this.api.updateByObjectId(param.batchInputMarketingEventPublicUpdateRequestFullV2, options).toPromise();
    }
    upsertWithHttpInfo(param, options) {
        return this.api.upsertWithHttpInfo(param.batchInputMarketingEventCreateRequestParams, options).toPromise();
    }
    upsert(param, options) {
        return this.api.upsert(param.batchInputMarketingEventCreateRequestParams, options).toPromise();
    }
}
exports.ObjectBatchApi = ObjectBatchApi;
const ObservableAPI_4 = require("./ObservableAPI");
class ObjectChangePropertyApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_4.ObservableChangePropertyApi(configuration, requestFactory, responseProcessor);
    }
    cancelWithHttpInfo(param, options) {
        return this.api.cancelWithHttpInfo(param.externalEventId, param.externalAccountId, options).toPromise();
    }
    cancel(param, options) {
        return this.api.cancel(param.externalEventId, param.externalAccountId, options).toPromise();
    }
    completeWithHttpInfo(param, options) {
        return this.api.completeWithHttpInfo(param.externalEventId, param.externalAccountId, param.marketingEventCompleteRequestParams, options).toPromise();
    }
    complete(param, options) {
        return this.api.complete(param.externalEventId, param.externalAccountId, param.marketingEventCompleteRequestParams, options).toPromise();
    }
}
exports.ObjectChangePropertyApi = ObjectChangePropertyApi;
const ObservableAPI_5 = require("./ObservableAPI");
class ObjectIdentifiersApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_5.ObservableIdentifiersApi(configuration, requestFactory, responseProcessor);
    }
    doSearchWithHttpInfo(param, options) {
        return this.api.doSearchWithHttpInfo(param.q, options).toPromise();
    }
    doSearch(param, options) {
        return this.api.doSearch(param.q, options).toPromise();
    }
    searchPortalEventsWithHttpInfo(param, options) {
        return this.api.searchPortalEventsWithHttpInfo(param.externalEventId, options).toPromise();
    }
    searchPortalEvents(param, options) {
        return this.api.searchPortalEvents(param.externalEventId, options).toPromise();
    }
}
exports.ObjectIdentifiersApi = ObjectIdentifiersApi;
const ObservableAPI_6 = require("./ObservableAPI");
class ObjectListAssociationsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_6.ObservableListAssociationsApi(configuration, requestFactory, responseProcessor);
    }
    associateByExternalAccountAndEventIdsWithHttpInfo(param, options) {
        return this.api.associateByExternalAccountAndEventIdsWithHttpInfo(param.externalAccountId, param.externalEventId, param.listId, options).toPromise();
    }
    associateByExternalAccountAndEventIds(param, options) {
        return this.api.associateByExternalAccountAndEventIds(param.externalAccountId, param.externalEventId, param.listId, options).toPromise();
    }
    associateByMarketingEventIdWithHttpInfo(param, options) {
        return this.api.associateByMarketingEventIdWithHttpInfo(param.marketingEventId, param.listId, options).toPromise();
    }
    associateByMarketingEventId(param, options) {
        return this.api.associateByMarketingEventId(param.marketingEventId, param.listId, options).toPromise();
    }
    disassociateByExternalAccountAndEventIdsWithHttpInfo(param, options) {
        return this.api.disassociateByExternalAccountAndEventIdsWithHttpInfo(param.externalAccountId, param.externalEventId, param.listId, options).toPromise();
    }
    disassociateByExternalAccountAndEventIds(param, options) {
        return this.api.disassociateByExternalAccountAndEventIds(param.externalAccountId, param.externalEventId, param.listId, options).toPromise();
    }
    disassociateByMarketingEventIdWithHttpInfo(param, options) {
        return this.api.disassociateByMarketingEventIdWithHttpInfo(param.marketingEventId, param.listId, options).toPromise();
    }
    disassociateByMarketingEventId(param, options) {
        return this.api.disassociateByMarketingEventId(param.marketingEventId, param.listId, options).toPromise();
    }
    getAllByExternalAccountAndEventIdsWithHttpInfo(param, options) {
        return this.api.getAllByExternalAccountAndEventIdsWithHttpInfo(param.externalAccountId, param.externalEventId, options).toPromise();
    }
    getAllByExternalAccountAndEventIds(param, options) {
        return this.api.getAllByExternalAccountAndEventIds(param.externalAccountId, param.externalEventId, options).toPromise();
    }
    getAllByMarketingEventIdWithHttpInfo(param, options) {
        return this.api.getAllByMarketingEventIdWithHttpInfo(param.marketingEventId, options).toPromise();
    }
    getAllByMarketingEventId(param, options) {
        return this.api.getAllByMarketingEventId(param.marketingEventId, options).toPromise();
    }
}
exports.ObjectListAssociationsApi = ObjectListAssociationsApi;
const ObservableAPI_7 = require("./ObservableAPI");
class ObjectRetrieveParticipantStateApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_7.ObservableRetrieveParticipantStateApi(configuration, requestFactory, responseProcessor);
    }
    getParticipationsBreakdownByContactIdWithHttpInfo(param, options) {
        return this.api.getParticipationsBreakdownByContactIdWithHttpInfo(param.contactIdentifier, param.state, param.limit, param.after, options).toPromise();
    }
    getParticipationsBreakdownByContactId(param, options) {
        return this.api.getParticipationsBreakdownByContactId(param.contactIdentifier, param.state, param.limit, param.after, options).toPromise();
    }
    getParticipationsBreakdownByExternalEventIdWithHttpInfo(param, options) {
        return this.api.getParticipationsBreakdownByExternalEventIdWithHttpInfo(param.externalAccountId, param.externalEventId, param.contactIdentifier, param.state, param.limit, param.after, options).toPromise();
    }
    getParticipationsBreakdownByExternalEventId(param, options) {
        return this.api.getParticipationsBreakdownByExternalEventId(param.externalAccountId, param.externalEventId, param.contactIdentifier, param.state, param.limit, param.after, options).toPromise();
    }
    getParticipationsBreakdownByMarketingEventIdWithHttpInfo(param, options) {
        return this.api.getParticipationsBreakdownByMarketingEventIdWithHttpInfo(param.marketingEventId, param.contactIdentifier, param.state, param.limit, param.after, options).toPromise();
    }
    getParticipationsBreakdownByMarketingEventId(param, options) {
        return this.api.getParticipationsBreakdownByMarketingEventId(param.marketingEventId, param.contactIdentifier, param.state, param.limit, param.after, options).toPromise();
    }
    getParticipationsCountersByEventExternalIdWithHttpInfo(param, options) {
        return this.api.getParticipationsCountersByEventExternalIdWithHttpInfo(param.externalAccountId, param.externalEventId, options).toPromise();
    }
    getParticipationsCountersByEventExternalId(param, options) {
        return this.api.getParticipationsCountersByEventExternalId(param.externalAccountId, param.externalEventId, options).toPromise();
    }
    getParticipationsCountersByMarketingEventIdWithHttpInfo(param, options) {
        return this.api.getParticipationsCountersByMarketingEventIdWithHttpInfo(param.marketingEventId, options).toPromise();
    }
    getParticipationsCountersByMarketingEventId(param, options) {
        return this.api.getParticipationsCountersByMarketingEventId(param.marketingEventId, options).toPromise();
    }
}
exports.ObjectRetrieveParticipantStateApi = ObjectRetrieveParticipantStateApi;
const ObservableAPI_8 = require("./ObservableAPI");
class ObjectSettingsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_8.ObservableSettingsApi(configuration, requestFactory, responseProcessor);
    }
    getAllWithHttpInfo(param, options) {
        return this.api.getAllWithHttpInfo(param.appId, options).toPromise();
    }
    getAll(param, options) {
        return this.api.getAll(param.appId, options).toPromise();
    }
    updateWithHttpInfo(param, options) {
        return this.api.updateWithHttpInfo(param.appId, param.eventDetailSettingsUrl, options).toPromise();
    }
    update(param, options) {
        return this.api.update(param.appId, param.eventDetailSettingsUrl, options).toPromise();
    }
}
exports.ObjectSettingsApi = ObjectSettingsApi;
const ObservableAPI_9 = require("./ObservableAPI");
class ObjectSubscriberStateChangesApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_9.ObservableSubscriberStateChangesApi(configuration, requestFactory, responseProcessor);
    }
    upsertByContactEmailWithHttpInfo(param, options) {
        return this.api.upsertByContactEmailWithHttpInfo(param.externalEventId, param.subscriberState, param.externalAccountId, param.batchInputMarketingEventEmailSubscriber, options).toPromise();
    }
    upsertByContactEmail(param, options) {
        return this.api.upsertByContactEmail(param.externalEventId, param.subscriberState, param.externalAccountId, param.batchInputMarketingEventEmailSubscriber, options).toPromise();
    }
    upsertByContactIdWithHttpInfo(param, options) {
        return this.api.upsertByContactIdWithHttpInfo(param.externalEventId, param.subscriberState, param.externalAccountId, param.batchInputMarketingEventSubscriber, options).toPromise();
    }
    upsertByContactId(param, options) {
        return this.api.upsertByContactId(param.externalEventId, param.subscriberState, param.externalAccountId, param.batchInputMarketingEventSubscriber, options).toPromise();
    }
}
exports.ObjectSubscriberStateChangesApi = ObjectSubscriberStateChangesApi;
//# sourceMappingURL=ObjectParamAPI.js.map