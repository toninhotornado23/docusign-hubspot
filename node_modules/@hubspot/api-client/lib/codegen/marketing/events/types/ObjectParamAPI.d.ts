import { HttpInfo } from '../http/http';
import { Configuration, ConfigurationOptions } from '../configuration';
import { AttendanceCounters } from '../models/AttendanceCounters';
import { BatchInputMarketingEventCreateRequestParams } from '../models/BatchInputMarketingEventCreateRequestParams';
import { BatchInputMarketingEventEmailSubscriber } from '../models/BatchInputMarketingEventEmailSubscriber';
import { BatchInputMarketingEventExternalUniqueIdentifier } from '../models/BatchInputMarketingEventExternalUniqueIdentifier';
import { BatchInputMarketingEventPublicObjectIdDeleteRequest } from '../models/BatchInputMarketingEventPublicObjectIdDeleteRequest';
import { BatchInputMarketingEventPublicUpdateRequestFullV2 } from '../models/BatchInputMarketingEventPublicUpdateRequestFullV2';
import { BatchInputMarketingEventSubscriber } from '../models/BatchInputMarketingEventSubscriber';
import { BatchResponseMarketingEventPublicDefaultResponse } from '../models/BatchResponseMarketingEventPublicDefaultResponse';
import { BatchResponseMarketingEventPublicDefaultResponseV2 } from '../models/BatchResponseMarketingEventPublicDefaultResponseV2';
import { BatchResponseMarketingEventPublicDefaultResponseV2WithErrors } from '../models/BatchResponseMarketingEventPublicDefaultResponseV2WithErrors';
import { BatchResponseSubscriberEmailResponse } from '../models/BatchResponseSubscriberEmailResponse';
import { BatchResponseSubscriberVidResponse } from '../models/BatchResponseSubscriberVidResponse';
import { CollectionResponseMarketingEventPublicReadResponseV2ForwardPaging } from '../models/CollectionResponseMarketingEventPublicReadResponseV2ForwardPaging';
import { CollectionResponseSearchPublicResponseWrapperNoPaging } from '../models/CollectionResponseSearchPublicResponseWrapperNoPaging';
import { CollectionResponseWithTotalMarketingEventIdentifiersResponseNoPaging } from '../models/CollectionResponseWithTotalMarketingEventIdentifiersResponseNoPaging';
import { CollectionResponseWithTotalParticipationBreakdownForwardPaging } from '../models/CollectionResponseWithTotalParticipationBreakdownForwardPaging';
import { CollectionResponseWithTotalPublicListNoPaging } from '../models/CollectionResponseWithTotalPublicListNoPaging';
import { EventDetailSettings } from '../models/EventDetailSettings';
import { EventDetailSettingsUrl } from '../models/EventDetailSettingsUrl';
import { MarketingEventCompleteRequestParams } from '../models/MarketingEventCompleteRequestParams';
import { MarketingEventCreateRequestParams } from '../models/MarketingEventCreateRequestParams';
import { MarketingEventDefaultResponse } from '../models/MarketingEventDefaultResponse';
import { MarketingEventPublicDefaultResponse } from '../models/MarketingEventPublicDefaultResponse';
import { MarketingEventPublicDefaultResponseV2 } from '../models/MarketingEventPublicDefaultResponseV2';
import { MarketingEventPublicReadResponse } from '../models/MarketingEventPublicReadResponse';
import { MarketingEventPublicReadResponseV2 } from '../models/MarketingEventPublicReadResponseV2';
import { MarketingEventPublicUpdateRequestV2 } from '../models/MarketingEventPublicUpdateRequestV2';
import { MarketingEventUpdateRequestParams } from '../models/MarketingEventUpdateRequestParams';
import { AddEventAttendeesApiRequestFactory, AddEventAttendeesApiResponseProcessor } from "../apis/AddEventAttendeesApi";
export interface AddEventAttendeesApiRecordByContactEmailsRequest {
    externalEventId: string;
    subscriberState: string;
    batchInputMarketingEventEmailSubscriber: BatchInputMarketingEventEmailSubscriber;
    externalAccountId?: string;
}
export interface AddEventAttendeesApiRecordByContactIdRequest {
    objectId: string;
    subscriberState: string;
    batchInputMarketingEventSubscriber: BatchInputMarketingEventSubscriber;
}
export interface AddEventAttendeesApiRecordByContactIdsRequest {
    externalEventId: string;
    subscriberState: string;
    batchInputMarketingEventSubscriber: BatchInputMarketingEventSubscriber;
    externalAccountId?: string;
}
export interface AddEventAttendeesApiRecordByEmailRequest {
    objectId: string;
    subscriberState: string;
    batchInputMarketingEventEmailSubscriber: BatchInputMarketingEventEmailSubscriber;
}
export declare class ObjectAddEventAttendeesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: AddEventAttendeesApiRequestFactory, responseProcessor?: AddEventAttendeesApiResponseProcessor);
    recordByContactEmailsWithHttpInfo(param: AddEventAttendeesApiRecordByContactEmailsRequest, options?: ConfigurationOptions): Promise<HttpInfo<BatchResponseSubscriberEmailResponse>>;
    recordByContactEmails(param: AddEventAttendeesApiRecordByContactEmailsRequest, options?: ConfigurationOptions): Promise<BatchResponseSubscriberEmailResponse>;
    recordByContactIdWithHttpInfo(param: AddEventAttendeesApiRecordByContactIdRequest, options?: ConfigurationOptions): Promise<HttpInfo<BatchResponseSubscriberVidResponse>>;
    recordByContactId(param: AddEventAttendeesApiRecordByContactIdRequest, options?: ConfigurationOptions): Promise<BatchResponseSubscriberVidResponse>;
    recordByContactIdsWithHttpInfo(param: AddEventAttendeesApiRecordByContactIdsRequest, options?: ConfigurationOptions): Promise<HttpInfo<BatchResponseSubscriberVidResponse>>;
    recordByContactIds(param: AddEventAttendeesApiRecordByContactIdsRequest, options?: ConfigurationOptions): Promise<BatchResponseSubscriberVidResponse>;
    recordByEmailWithHttpInfo(param: AddEventAttendeesApiRecordByEmailRequest, options?: ConfigurationOptions): Promise<HttpInfo<BatchResponseSubscriberEmailResponse>>;
    recordByEmail(param: AddEventAttendeesApiRecordByEmailRequest, options?: ConfigurationOptions): Promise<BatchResponseSubscriberEmailResponse>;
}
import { BasicApiRequestFactory, BasicApiResponseProcessor } from "../apis/BasicApi";
export interface BasicApiArchiveRequest {
    externalEventId: string;
    externalAccountId: string;
}
export interface BasicApiArchiveByObjectIdRequest {
    objectId: string;
}
export interface BasicApiCreateRequest {
    marketingEventCreateRequestParams: MarketingEventCreateRequestParams;
}
export interface BasicApiGetAllRequest {
    after?: string;
    limit?: number;
}
export interface BasicApiGetByObjectIdRequest {
    objectId: string;
}
export interface BasicApiGetDetailsRequest {
    externalEventId: string;
    externalAccountId: string;
}
export interface BasicApiUpdateRequest {
    externalEventId: string;
    externalAccountId: string;
    marketingEventUpdateRequestParams: MarketingEventUpdateRequestParams;
}
export interface BasicApiUpdateByObjectIdRequest {
    objectId: string;
    marketingEventPublicUpdateRequestV2: MarketingEventPublicUpdateRequestV2;
}
export interface BasicApiUpsertRequest {
    externalEventId: string;
    marketingEventCreateRequestParams: MarketingEventCreateRequestParams;
}
export declare class ObjectBasicApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BasicApiRequestFactory, responseProcessor?: BasicApiResponseProcessor);
    archiveWithHttpInfo(param: BasicApiArchiveRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    archive(param: BasicApiArchiveRequest, options?: ConfigurationOptions): Promise<void>;
    archiveByObjectIdWithHttpInfo(param: BasicApiArchiveByObjectIdRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    archiveByObjectId(param: BasicApiArchiveByObjectIdRequest, options?: ConfigurationOptions): Promise<void>;
    createWithHttpInfo(param: BasicApiCreateRequest, options?: ConfigurationOptions): Promise<HttpInfo<MarketingEventDefaultResponse>>;
    create(param: BasicApiCreateRequest, options?: ConfigurationOptions): Promise<MarketingEventDefaultResponse>;
    getAllWithHttpInfo(param?: BasicApiGetAllRequest, options?: ConfigurationOptions): Promise<HttpInfo<CollectionResponseMarketingEventPublicReadResponseV2ForwardPaging>>;
    getAll(param?: BasicApiGetAllRequest, options?: ConfigurationOptions): Promise<CollectionResponseMarketingEventPublicReadResponseV2ForwardPaging>;
    getByObjectIdWithHttpInfo(param: BasicApiGetByObjectIdRequest, options?: ConfigurationOptions): Promise<HttpInfo<MarketingEventPublicReadResponseV2>>;
    getByObjectId(param: BasicApiGetByObjectIdRequest, options?: ConfigurationOptions): Promise<MarketingEventPublicReadResponseV2>;
    getDetailsWithHttpInfo(param: BasicApiGetDetailsRequest, options?: ConfigurationOptions): Promise<HttpInfo<MarketingEventPublicReadResponse>>;
    getDetails(param: BasicApiGetDetailsRequest, options?: ConfigurationOptions): Promise<MarketingEventPublicReadResponse>;
    updateWithHttpInfo(param: BasicApiUpdateRequest, options?: ConfigurationOptions): Promise<HttpInfo<MarketingEventPublicDefaultResponse>>;
    update(param: BasicApiUpdateRequest, options?: ConfigurationOptions): Promise<MarketingEventPublicDefaultResponse>;
    updateByObjectIdWithHttpInfo(param: BasicApiUpdateByObjectIdRequest, options?: ConfigurationOptions): Promise<HttpInfo<MarketingEventPublicDefaultResponseV2>>;
    updateByObjectId(param: BasicApiUpdateByObjectIdRequest, options?: ConfigurationOptions): Promise<MarketingEventPublicDefaultResponseV2>;
    upsertWithHttpInfo(param: BasicApiUpsertRequest, options?: ConfigurationOptions): Promise<HttpInfo<MarketingEventPublicDefaultResponse>>;
    upsert(param: BasicApiUpsertRequest, options?: ConfigurationOptions): Promise<MarketingEventPublicDefaultResponse>;
}
import { BatchApiRequestFactory, BatchApiResponseProcessor } from "../apis/BatchApi";
export interface BatchApiArchiveRequest {
    batchInputMarketingEventExternalUniqueIdentifier: BatchInputMarketingEventExternalUniqueIdentifier;
}
export interface BatchApiArchiveByObjectIdRequest {
    batchInputMarketingEventPublicObjectIdDeleteRequest: BatchInputMarketingEventPublicObjectIdDeleteRequest;
}
export interface BatchApiUpdateByObjectIdRequest {
    batchInputMarketingEventPublicUpdateRequestFullV2: BatchInputMarketingEventPublicUpdateRequestFullV2;
}
export interface BatchApiUpsertRequest {
    batchInputMarketingEventCreateRequestParams: BatchInputMarketingEventCreateRequestParams;
}
export declare class ObjectBatchApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BatchApiRequestFactory, responseProcessor?: BatchApiResponseProcessor);
    archiveWithHttpInfo(param: BatchApiArchiveRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    archive(param: BatchApiArchiveRequest, options?: ConfigurationOptions): Promise<void>;
    archiveByObjectIdWithHttpInfo(param: BatchApiArchiveByObjectIdRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    archiveByObjectId(param: BatchApiArchiveByObjectIdRequest, options?: ConfigurationOptions): Promise<void>;
    updateByObjectIdWithHttpInfo(param: BatchApiUpdateByObjectIdRequest, options?: ConfigurationOptions): Promise<HttpInfo<BatchResponseMarketingEventPublicDefaultResponseV2WithErrors | BatchResponseMarketingEventPublicDefaultResponseV2>>;
    updateByObjectId(param: BatchApiUpdateByObjectIdRequest, options?: ConfigurationOptions): Promise<BatchResponseMarketingEventPublicDefaultResponseV2WithErrors | BatchResponseMarketingEventPublicDefaultResponseV2>;
    upsertWithHttpInfo(param: BatchApiUpsertRequest, options?: ConfigurationOptions): Promise<HttpInfo<BatchResponseMarketingEventPublicDefaultResponse>>;
    upsert(param: BatchApiUpsertRequest, options?: ConfigurationOptions): Promise<BatchResponseMarketingEventPublicDefaultResponse>;
}
import { ChangePropertyApiRequestFactory, ChangePropertyApiResponseProcessor } from "../apis/ChangePropertyApi";
export interface ChangePropertyApiCancelRequest {
    externalEventId: string;
    externalAccountId: string;
}
export interface ChangePropertyApiCompleteRequest {
    externalEventId: string;
    externalAccountId: string;
    marketingEventCompleteRequestParams: MarketingEventCompleteRequestParams;
}
export declare class ObjectChangePropertyApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: ChangePropertyApiRequestFactory, responseProcessor?: ChangePropertyApiResponseProcessor);
    cancelWithHttpInfo(param: ChangePropertyApiCancelRequest, options?: ConfigurationOptions): Promise<HttpInfo<MarketingEventDefaultResponse>>;
    cancel(param: ChangePropertyApiCancelRequest, options?: ConfigurationOptions): Promise<MarketingEventDefaultResponse>;
    completeWithHttpInfo(param: ChangePropertyApiCompleteRequest, options?: ConfigurationOptions): Promise<HttpInfo<MarketingEventDefaultResponse>>;
    complete(param: ChangePropertyApiCompleteRequest, options?: ConfigurationOptions): Promise<MarketingEventDefaultResponse>;
}
import { IdentifiersApiRequestFactory, IdentifiersApiResponseProcessor } from "../apis/IdentifiersApi";
export interface IdentifiersApiDoSearchRequest {
    q: string;
}
export interface IdentifiersApiSearchPortalEventsRequest {
    externalEventId: string;
}
export declare class ObjectIdentifiersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: IdentifiersApiRequestFactory, responseProcessor?: IdentifiersApiResponseProcessor);
    doSearchWithHttpInfo(param: IdentifiersApiDoSearchRequest, options?: ConfigurationOptions): Promise<HttpInfo<CollectionResponseSearchPublicResponseWrapperNoPaging>>;
    doSearch(param: IdentifiersApiDoSearchRequest, options?: ConfigurationOptions): Promise<CollectionResponseSearchPublicResponseWrapperNoPaging>;
    searchPortalEventsWithHttpInfo(param: IdentifiersApiSearchPortalEventsRequest, options?: ConfigurationOptions): Promise<HttpInfo<CollectionResponseWithTotalMarketingEventIdentifiersResponseNoPaging>>;
    searchPortalEvents(param: IdentifiersApiSearchPortalEventsRequest, options?: ConfigurationOptions): Promise<CollectionResponseWithTotalMarketingEventIdentifiersResponseNoPaging>;
}
import { ListAssociationsApiRequestFactory, ListAssociationsApiResponseProcessor } from "../apis/ListAssociationsApi";
export interface ListAssociationsApiAssociateByExternalAccountAndEventIdsRequest {
    externalAccountId: string;
    externalEventId: string;
    listId: string;
}
export interface ListAssociationsApiAssociateByMarketingEventIdRequest {
    marketingEventId: string;
    listId: string;
}
export interface ListAssociationsApiDisassociateByExternalAccountAndEventIdsRequest {
    externalAccountId: string;
    externalEventId: string;
    listId: string;
}
export interface ListAssociationsApiDisassociateByMarketingEventIdRequest {
    marketingEventId: string;
    listId: string;
}
export interface ListAssociationsApiGetAllByExternalAccountAndEventIdsRequest {
    externalAccountId: string;
    externalEventId: string;
}
export interface ListAssociationsApiGetAllByMarketingEventIdRequest {
    marketingEventId: string;
}
export declare class ObjectListAssociationsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: ListAssociationsApiRequestFactory, responseProcessor?: ListAssociationsApiResponseProcessor);
    associateByExternalAccountAndEventIdsWithHttpInfo(param: ListAssociationsApiAssociateByExternalAccountAndEventIdsRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    associateByExternalAccountAndEventIds(param: ListAssociationsApiAssociateByExternalAccountAndEventIdsRequest, options?: ConfigurationOptions): Promise<void>;
    associateByMarketingEventIdWithHttpInfo(param: ListAssociationsApiAssociateByMarketingEventIdRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    associateByMarketingEventId(param: ListAssociationsApiAssociateByMarketingEventIdRequest, options?: ConfigurationOptions): Promise<void>;
    disassociateByExternalAccountAndEventIdsWithHttpInfo(param: ListAssociationsApiDisassociateByExternalAccountAndEventIdsRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    disassociateByExternalAccountAndEventIds(param: ListAssociationsApiDisassociateByExternalAccountAndEventIdsRequest, options?: ConfigurationOptions): Promise<void>;
    disassociateByMarketingEventIdWithHttpInfo(param: ListAssociationsApiDisassociateByMarketingEventIdRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    disassociateByMarketingEventId(param: ListAssociationsApiDisassociateByMarketingEventIdRequest, options?: ConfigurationOptions): Promise<void>;
    getAllByExternalAccountAndEventIdsWithHttpInfo(param: ListAssociationsApiGetAllByExternalAccountAndEventIdsRequest, options?: ConfigurationOptions): Promise<HttpInfo<CollectionResponseWithTotalPublicListNoPaging>>;
    getAllByExternalAccountAndEventIds(param: ListAssociationsApiGetAllByExternalAccountAndEventIdsRequest, options?: ConfigurationOptions): Promise<CollectionResponseWithTotalPublicListNoPaging>;
    getAllByMarketingEventIdWithHttpInfo(param: ListAssociationsApiGetAllByMarketingEventIdRequest, options?: ConfigurationOptions): Promise<HttpInfo<CollectionResponseWithTotalPublicListNoPaging>>;
    getAllByMarketingEventId(param: ListAssociationsApiGetAllByMarketingEventIdRequest, options?: ConfigurationOptions): Promise<CollectionResponseWithTotalPublicListNoPaging>;
}
import { RetrieveParticipantStateApiRequestFactory, RetrieveParticipantStateApiResponseProcessor } from "../apis/RetrieveParticipantStateApi";
export interface RetrieveParticipantStateApiGetParticipationsBreakdownByContactIdRequest {
    contactIdentifier: string;
    state?: string;
    limit?: number;
    after?: string;
}
export interface RetrieveParticipantStateApiGetParticipationsBreakdownByExternalEventIdRequest {
    externalAccountId: string;
    externalEventId: string;
    contactIdentifier?: string;
    state?: string;
    limit?: number;
    after?: string;
}
export interface RetrieveParticipantStateApiGetParticipationsBreakdownByMarketingEventIdRequest {
    marketingEventId: number;
    contactIdentifier?: string;
    state?: string;
    limit?: number;
    after?: string;
}
export interface RetrieveParticipantStateApiGetParticipationsCountersByEventExternalIdRequest {
    externalAccountId: string;
    externalEventId: string;
}
export interface RetrieveParticipantStateApiGetParticipationsCountersByMarketingEventIdRequest {
    marketingEventId: number;
}
export declare class ObjectRetrieveParticipantStateApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: RetrieveParticipantStateApiRequestFactory, responseProcessor?: RetrieveParticipantStateApiResponseProcessor);
    getParticipationsBreakdownByContactIdWithHttpInfo(param: RetrieveParticipantStateApiGetParticipationsBreakdownByContactIdRequest, options?: ConfigurationOptions): Promise<HttpInfo<CollectionResponseWithTotalParticipationBreakdownForwardPaging>>;
    getParticipationsBreakdownByContactId(param: RetrieveParticipantStateApiGetParticipationsBreakdownByContactIdRequest, options?: ConfigurationOptions): Promise<CollectionResponseWithTotalParticipationBreakdownForwardPaging>;
    getParticipationsBreakdownByExternalEventIdWithHttpInfo(param: RetrieveParticipantStateApiGetParticipationsBreakdownByExternalEventIdRequest, options?: ConfigurationOptions): Promise<HttpInfo<CollectionResponseWithTotalParticipationBreakdownForwardPaging>>;
    getParticipationsBreakdownByExternalEventId(param: RetrieveParticipantStateApiGetParticipationsBreakdownByExternalEventIdRequest, options?: ConfigurationOptions): Promise<CollectionResponseWithTotalParticipationBreakdownForwardPaging>;
    getParticipationsBreakdownByMarketingEventIdWithHttpInfo(param: RetrieveParticipantStateApiGetParticipationsBreakdownByMarketingEventIdRequest, options?: ConfigurationOptions): Promise<HttpInfo<CollectionResponseWithTotalParticipationBreakdownForwardPaging>>;
    getParticipationsBreakdownByMarketingEventId(param: RetrieveParticipantStateApiGetParticipationsBreakdownByMarketingEventIdRequest, options?: ConfigurationOptions): Promise<CollectionResponseWithTotalParticipationBreakdownForwardPaging>;
    getParticipationsCountersByEventExternalIdWithHttpInfo(param: RetrieveParticipantStateApiGetParticipationsCountersByEventExternalIdRequest, options?: ConfigurationOptions): Promise<HttpInfo<AttendanceCounters>>;
    getParticipationsCountersByEventExternalId(param: RetrieveParticipantStateApiGetParticipationsCountersByEventExternalIdRequest, options?: ConfigurationOptions): Promise<AttendanceCounters>;
    getParticipationsCountersByMarketingEventIdWithHttpInfo(param: RetrieveParticipantStateApiGetParticipationsCountersByMarketingEventIdRequest, options?: ConfigurationOptions): Promise<HttpInfo<AttendanceCounters>>;
    getParticipationsCountersByMarketingEventId(param: RetrieveParticipantStateApiGetParticipationsCountersByMarketingEventIdRequest, options?: ConfigurationOptions): Promise<AttendanceCounters>;
}
import { SettingsApiRequestFactory, SettingsApiResponseProcessor } from "../apis/SettingsApi";
export interface SettingsApiGetAllRequest {
    appId: number;
}
export interface SettingsApiUpdateRequest {
    appId: number;
    eventDetailSettingsUrl: EventDetailSettingsUrl;
}
export declare class ObjectSettingsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: SettingsApiRequestFactory, responseProcessor?: SettingsApiResponseProcessor);
    getAllWithHttpInfo(param: SettingsApiGetAllRequest, options?: ConfigurationOptions): Promise<HttpInfo<EventDetailSettings>>;
    getAll(param: SettingsApiGetAllRequest, options?: ConfigurationOptions): Promise<EventDetailSettings>;
    updateWithHttpInfo(param: SettingsApiUpdateRequest, options?: ConfigurationOptions): Promise<HttpInfo<EventDetailSettings>>;
    update(param: SettingsApiUpdateRequest, options?: ConfigurationOptions): Promise<EventDetailSettings>;
}
import { SubscriberStateChangesApiRequestFactory, SubscriberStateChangesApiResponseProcessor } from "../apis/SubscriberStateChangesApi";
export interface SubscriberStateChangesApiUpsertByContactEmailRequest {
    externalEventId: string;
    subscriberState: string;
    externalAccountId: string;
    batchInputMarketingEventEmailSubscriber: BatchInputMarketingEventEmailSubscriber;
}
export interface SubscriberStateChangesApiUpsertByContactIdRequest {
    externalEventId: string;
    subscriberState: string;
    externalAccountId: string;
    batchInputMarketingEventSubscriber: BatchInputMarketingEventSubscriber;
}
export declare class ObjectSubscriberStateChangesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: SubscriberStateChangesApiRequestFactory, responseProcessor?: SubscriberStateChangesApiResponseProcessor);
    upsertByContactEmailWithHttpInfo(param: SubscriberStateChangesApiUpsertByContactEmailRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    upsertByContactEmail(param: SubscriberStateChangesApiUpsertByContactEmailRequest, options?: ConfigurationOptions): Promise<void>;
    upsertByContactIdWithHttpInfo(param: SubscriberStateChangesApiUpsertByContactIdRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    upsertByContactId(param: SubscriberStateChangesApiUpsertByContactIdRequest, options?: ConfigurationOptions): Promise<void>;
}
