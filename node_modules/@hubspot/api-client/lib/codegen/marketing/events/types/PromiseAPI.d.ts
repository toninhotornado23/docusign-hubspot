import { HttpInfo } from '../http/http';
import { Configuration, PromiseConfigurationOptions } from '../configuration';
import { AttendanceCounters } from '../models/AttendanceCounters';
import { BatchInputMarketingEventCreateRequestParams } from '../models/BatchInputMarketingEventCreateRequestParams';
import { BatchInputMarketingEventEmailSubscriber } from '../models/BatchInputMarketingEventEmailSubscriber';
import { BatchInputMarketingEventExternalUniqueIdentifier } from '../models/BatchInputMarketingEventExternalUniqueIdentifier';
import { BatchInputMarketingEventPublicObjectIdDeleteRequest } from '../models/BatchInputMarketingEventPublicObjectIdDeleteRequest';
import { BatchInputMarketingEventPublicUpdateRequestFullV2 } from '../models/BatchInputMarketingEventPublicUpdateRequestFullV2';
import { BatchInputMarketingEventSubscriber } from '../models/BatchInputMarketingEventSubscriber';
import { BatchResponseMarketingEventPublicDefaultResponse } from '../models/BatchResponseMarketingEventPublicDefaultResponse';
import { BatchResponseMarketingEventPublicDefaultResponseV2 } from '../models/BatchResponseMarketingEventPublicDefaultResponseV2';
import { BatchResponseMarketingEventPublicDefaultResponseV2WithErrors } from '../models/BatchResponseMarketingEventPublicDefaultResponseV2WithErrors';
import { BatchResponseSubscriberEmailResponse } from '../models/BatchResponseSubscriberEmailResponse';
import { BatchResponseSubscriberVidResponse } from '../models/BatchResponseSubscriberVidResponse';
import { CollectionResponseMarketingEventPublicReadResponseV2ForwardPaging } from '../models/CollectionResponseMarketingEventPublicReadResponseV2ForwardPaging';
import { CollectionResponseSearchPublicResponseWrapperNoPaging } from '../models/CollectionResponseSearchPublicResponseWrapperNoPaging';
import { CollectionResponseWithTotalMarketingEventIdentifiersResponseNoPaging } from '../models/CollectionResponseWithTotalMarketingEventIdentifiersResponseNoPaging';
import { CollectionResponseWithTotalParticipationBreakdownForwardPaging } from '../models/CollectionResponseWithTotalParticipationBreakdownForwardPaging';
import { CollectionResponseWithTotalPublicListNoPaging } from '../models/CollectionResponseWithTotalPublicListNoPaging';
import { EventDetailSettings } from '../models/EventDetailSettings';
import { EventDetailSettingsUrl } from '../models/EventDetailSettingsUrl';
import { MarketingEventCompleteRequestParams } from '../models/MarketingEventCompleteRequestParams';
import { MarketingEventCreateRequestParams } from '../models/MarketingEventCreateRequestParams';
import { MarketingEventDefaultResponse } from '../models/MarketingEventDefaultResponse';
import { MarketingEventPublicDefaultResponse } from '../models/MarketingEventPublicDefaultResponse';
import { MarketingEventPublicDefaultResponseV2 } from '../models/MarketingEventPublicDefaultResponseV2';
import { MarketingEventPublicReadResponse } from '../models/MarketingEventPublicReadResponse';
import { MarketingEventPublicReadResponseV2 } from '../models/MarketingEventPublicReadResponseV2';
import { MarketingEventPublicUpdateRequestV2 } from '../models/MarketingEventPublicUpdateRequestV2';
import { MarketingEventUpdateRequestParams } from '../models/MarketingEventUpdateRequestParams';
import { AddEventAttendeesApiRequestFactory, AddEventAttendeesApiResponseProcessor } from "../apis/AddEventAttendeesApi";
export declare class PromiseAddEventAttendeesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: AddEventAttendeesApiRequestFactory, responseProcessor?: AddEventAttendeesApiResponseProcessor);
    recordByContactEmailsWithHttpInfo(externalEventId: string, subscriberState: string, batchInputMarketingEventEmailSubscriber: BatchInputMarketingEventEmailSubscriber, externalAccountId?: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<BatchResponseSubscriberEmailResponse>>;
    recordByContactEmails(externalEventId: string, subscriberState: string, batchInputMarketingEventEmailSubscriber: BatchInputMarketingEventEmailSubscriber, externalAccountId?: string, _options?: PromiseConfigurationOptions): Promise<BatchResponseSubscriberEmailResponse>;
    recordByContactIdWithHttpInfo(objectId: string, subscriberState: string, batchInputMarketingEventSubscriber: BatchInputMarketingEventSubscriber, _options?: PromiseConfigurationOptions): Promise<HttpInfo<BatchResponseSubscriberVidResponse>>;
    recordByContactId(objectId: string, subscriberState: string, batchInputMarketingEventSubscriber: BatchInputMarketingEventSubscriber, _options?: PromiseConfigurationOptions): Promise<BatchResponseSubscriberVidResponse>;
    recordByContactIdsWithHttpInfo(externalEventId: string, subscriberState: string, batchInputMarketingEventSubscriber: BatchInputMarketingEventSubscriber, externalAccountId?: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<BatchResponseSubscriberVidResponse>>;
    recordByContactIds(externalEventId: string, subscriberState: string, batchInputMarketingEventSubscriber: BatchInputMarketingEventSubscriber, externalAccountId?: string, _options?: PromiseConfigurationOptions): Promise<BatchResponseSubscriberVidResponse>;
    recordByEmailWithHttpInfo(objectId: string, subscriberState: string, batchInputMarketingEventEmailSubscriber: BatchInputMarketingEventEmailSubscriber, _options?: PromiseConfigurationOptions): Promise<HttpInfo<BatchResponseSubscriberEmailResponse>>;
    recordByEmail(objectId: string, subscriberState: string, batchInputMarketingEventEmailSubscriber: BatchInputMarketingEventEmailSubscriber, _options?: PromiseConfigurationOptions): Promise<BatchResponseSubscriberEmailResponse>;
}
import { BasicApiRequestFactory, BasicApiResponseProcessor } from "../apis/BasicApi";
export declare class PromiseBasicApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BasicApiRequestFactory, responseProcessor?: BasicApiResponseProcessor);
    archiveWithHttpInfo(externalEventId: string, externalAccountId: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<void>>;
    archive(externalEventId: string, externalAccountId: string, _options?: PromiseConfigurationOptions): Promise<void>;
    archiveByObjectIdWithHttpInfo(objectId: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<void>>;
    archiveByObjectId(objectId: string, _options?: PromiseConfigurationOptions): Promise<void>;
    createWithHttpInfo(marketingEventCreateRequestParams: MarketingEventCreateRequestParams, _options?: PromiseConfigurationOptions): Promise<HttpInfo<MarketingEventDefaultResponse>>;
    create(marketingEventCreateRequestParams: MarketingEventCreateRequestParams, _options?: PromiseConfigurationOptions): Promise<MarketingEventDefaultResponse>;
    getAllWithHttpInfo(after?: string, limit?: number, _options?: PromiseConfigurationOptions): Promise<HttpInfo<CollectionResponseMarketingEventPublicReadResponseV2ForwardPaging>>;
    getAll(after?: string, limit?: number, _options?: PromiseConfigurationOptions): Promise<CollectionResponseMarketingEventPublicReadResponseV2ForwardPaging>;
    getByObjectIdWithHttpInfo(objectId: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<MarketingEventPublicReadResponseV2>>;
    getByObjectId(objectId: string, _options?: PromiseConfigurationOptions): Promise<MarketingEventPublicReadResponseV2>;
    getDetailsWithHttpInfo(externalEventId: string, externalAccountId: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<MarketingEventPublicReadResponse>>;
    getDetails(externalEventId: string, externalAccountId: string, _options?: PromiseConfigurationOptions): Promise<MarketingEventPublicReadResponse>;
    updateWithHttpInfo(externalEventId: string, externalAccountId: string, marketingEventUpdateRequestParams: MarketingEventUpdateRequestParams, _options?: PromiseConfigurationOptions): Promise<HttpInfo<MarketingEventPublicDefaultResponse>>;
    update(externalEventId: string, externalAccountId: string, marketingEventUpdateRequestParams: MarketingEventUpdateRequestParams, _options?: PromiseConfigurationOptions): Promise<MarketingEventPublicDefaultResponse>;
    updateByObjectIdWithHttpInfo(objectId: string, marketingEventPublicUpdateRequestV2: MarketingEventPublicUpdateRequestV2, _options?: PromiseConfigurationOptions): Promise<HttpInfo<MarketingEventPublicDefaultResponseV2>>;
    updateByObjectId(objectId: string, marketingEventPublicUpdateRequestV2: MarketingEventPublicUpdateRequestV2, _options?: PromiseConfigurationOptions): Promise<MarketingEventPublicDefaultResponseV2>;
    upsertWithHttpInfo(externalEventId: string, marketingEventCreateRequestParams: MarketingEventCreateRequestParams, _options?: PromiseConfigurationOptions): Promise<HttpInfo<MarketingEventPublicDefaultResponse>>;
    upsert(externalEventId: string, marketingEventCreateRequestParams: MarketingEventCreateRequestParams, _options?: PromiseConfigurationOptions): Promise<MarketingEventPublicDefaultResponse>;
}
import { BatchApiRequestFactory, BatchApiResponseProcessor } from "../apis/BatchApi";
export declare class PromiseBatchApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BatchApiRequestFactory, responseProcessor?: BatchApiResponseProcessor);
    archiveWithHttpInfo(batchInputMarketingEventExternalUniqueIdentifier: BatchInputMarketingEventExternalUniqueIdentifier, _options?: PromiseConfigurationOptions): Promise<HttpInfo<void>>;
    archive(batchInputMarketingEventExternalUniqueIdentifier: BatchInputMarketingEventExternalUniqueIdentifier, _options?: PromiseConfigurationOptions): Promise<void>;
    archiveByObjectIdWithHttpInfo(batchInputMarketingEventPublicObjectIdDeleteRequest: BatchInputMarketingEventPublicObjectIdDeleteRequest, _options?: PromiseConfigurationOptions): Promise<HttpInfo<void>>;
    archiveByObjectId(batchInputMarketingEventPublicObjectIdDeleteRequest: BatchInputMarketingEventPublicObjectIdDeleteRequest, _options?: PromiseConfigurationOptions): Promise<void>;
    updateByObjectIdWithHttpInfo(batchInputMarketingEventPublicUpdateRequestFullV2: BatchInputMarketingEventPublicUpdateRequestFullV2, _options?: PromiseConfigurationOptions): Promise<HttpInfo<BatchResponseMarketingEventPublicDefaultResponseV2WithErrors | BatchResponseMarketingEventPublicDefaultResponseV2>>;
    updateByObjectId(batchInputMarketingEventPublicUpdateRequestFullV2: BatchInputMarketingEventPublicUpdateRequestFullV2, _options?: PromiseConfigurationOptions): Promise<BatchResponseMarketingEventPublicDefaultResponseV2WithErrors | BatchResponseMarketingEventPublicDefaultResponseV2>;
    upsertWithHttpInfo(batchInputMarketingEventCreateRequestParams: BatchInputMarketingEventCreateRequestParams, _options?: PromiseConfigurationOptions): Promise<HttpInfo<BatchResponseMarketingEventPublicDefaultResponse>>;
    upsert(batchInputMarketingEventCreateRequestParams: BatchInputMarketingEventCreateRequestParams, _options?: PromiseConfigurationOptions): Promise<BatchResponseMarketingEventPublicDefaultResponse>;
}
import { ChangePropertyApiRequestFactory, ChangePropertyApiResponseProcessor } from "../apis/ChangePropertyApi";
export declare class PromiseChangePropertyApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: ChangePropertyApiRequestFactory, responseProcessor?: ChangePropertyApiResponseProcessor);
    cancelWithHttpInfo(externalEventId: string, externalAccountId: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<MarketingEventDefaultResponse>>;
    cancel(externalEventId: string, externalAccountId: string, _options?: PromiseConfigurationOptions): Promise<MarketingEventDefaultResponse>;
    completeWithHttpInfo(externalEventId: string, externalAccountId: string, marketingEventCompleteRequestParams: MarketingEventCompleteRequestParams, _options?: PromiseConfigurationOptions): Promise<HttpInfo<MarketingEventDefaultResponse>>;
    complete(externalEventId: string, externalAccountId: string, marketingEventCompleteRequestParams: MarketingEventCompleteRequestParams, _options?: PromiseConfigurationOptions): Promise<MarketingEventDefaultResponse>;
}
import { IdentifiersApiRequestFactory, IdentifiersApiResponseProcessor } from "../apis/IdentifiersApi";
export declare class PromiseIdentifiersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: IdentifiersApiRequestFactory, responseProcessor?: IdentifiersApiResponseProcessor);
    doSearchWithHttpInfo(q: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<CollectionResponseSearchPublicResponseWrapperNoPaging>>;
    doSearch(q: string, _options?: PromiseConfigurationOptions): Promise<CollectionResponseSearchPublicResponseWrapperNoPaging>;
    searchPortalEventsWithHttpInfo(externalEventId: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<CollectionResponseWithTotalMarketingEventIdentifiersResponseNoPaging>>;
    searchPortalEvents(externalEventId: string, _options?: PromiseConfigurationOptions): Promise<CollectionResponseWithTotalMarketingEventIdentifiersResponseNoPaging>;
}
import { ListAssociationsApiRequestFactory, ListAssociationsApiResponseProcessor } from "../apis/ListAssociationsApi";
export declare class PromiseListAssociationsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: ListAssociationsApiRequestFactory, responseProcessor?: ListAssociationsApiResponseProcessor);
    associateByExternalAccountAndEventIdsWithHttpInfo(externalAccountId: string, externalEventId: string, listId: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<void>>;
    associateByExternalAccountAndEventIds(externalAccountId: string, externalEventId: string, listId: string, _options?: PromiseConfigurationOptions): Promise<void>;
    associateByMarketingEventIdWithHttpInfo(marketingEventId: string, listId: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<void>>;
    associateByMarketingEventId(marketingEventId: string, listId: string, _options?: PromiseConfigurationOptions): Promise<void>;
    disassociateByExternalAccountAndEventIdsWithHttpInfo(externalAccountId: string, externalEventId: string, listId: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<void>>;
    disassociateByExternalAccountAndEventIds(externalAccountId: string, externalEventId: string, listId: string, _options?: PromiseConfigurationOptions): Promise<void>;
    disassociateByMarketingEventIdWithHttpInfo(marketingEventId: string, listId: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<void>>;
    disassociateByMarketingEventId(marketingEventId: string, listId: string, _options?: PromiseConfigurationOptions): Promise<void>;
    getAllByExternalAccountAndEventIdsWithHttpInfo(externalAccountId: string, externalEventId: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<CollectionResponseWithTotalPublicListNoPaging>>;
    getAllByExternalAccountAndEventIds(externalAccountId: string, externalEventId: string, _options?: PromiseConfigurationOptions): Promise<CollectionResponseWithTotalPublicListNoPaging>;
    getAllByMarketingEventIdWithHttpInfo(marketingEventId: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<CollectionResponseWithTotalPublicListNoPaging>>;
    getAllByMarketingEventId(marketingEventId: string, _options?: PromiseConfigurationOptions): Promise<CollectionResponseWithTotalPublicListNoPaging>;
}
import { RetrieveParticipantStateApiRequestFactory, RetrieveParticipantStateApiResponseProcessor } from "../apis/RetrieveParticipantStateApi";
export declare class PromiseRetrieveParticipantStateApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: RetrieveParticipantStateApiRequestFactory, responseProcessor?: RetrieveParticipantStateApiResponseProcessor);
    getParticipationsBreakdownByContactIdWithHttpInfo(contactIdentifier: string, state?: string, limit?: number, after?: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<CollectionResponseWithTotalParticipationBreakdownForwardPaging>>;
    getParticipationsBreakdownByContactId(contactIdentifier: string, state?: string, limit?: number, after?: string, _options?: PromiseConfigurationOptions): Promise<CollectionResponseWithTotalParticipationBreakdownForwardPaging>;
    getParticipationsBreakdownByExternalEventIdWithHttpInfo(externalAccountId: string, externalEventId: string, contactIdentifier?: string, state?: string, limit?: number, after?: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<CollectionResponseWithTotalParticipationBreakdownForwardPaging>>;
    getParticipationsBreakdownByExternalEventId(externalAccountId: string, externalEventId: string, contactIdentifier?: string, state?: string, limit?: number, after?: string, _options?: PromiseConfigurationOptions): Promise<CollectionResponseWithTotalParticipationBreakdownForwardPaging>;
    getParticipationsBreakdownByMarketingEventIdWithHttpInfo(marketingEventId: number, contactIdentifier?: string, state?: string, limit?: number, after?: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<CollectionResponseWithTotalParticipationBreakdownForwardPaging>>;
    getParticipationsBreakdownByMarketingEventId(marketingEventId: number, contactIdentifier?: string, state?: string, limit?: number, after?: string, _options?: PromiseConfigurationOptions): Promise<CollectionResponseWithTotalParticipationBreakdownForwardPaging>;
    getParticipationsCountersByEventExternalIdWithHttpInfo(externalAccountId: string, externalEventId: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<AttendanceCounters>>;
    getParticipationsCountersByEventExternalId(externalAccountId: string, externalEventId: string, _options?: PromiseConfigurationOptions): Promise<AttendanceCounters>;
    getParticipationsCountersByMarketingEventIdWithHttpInfo(marketingEventId: number, _options?: PromiseConfigurationOptions): Promise<HttpInfo<AttendanceCounters>>;
    getParticipationsCountersByMarketingEventId(marketingEventId: number, _options?: PromiseConfigurationOptions): Promise<AttendanceCounters>;
}
import { SettingsApiRequestFactory, SettingsApiResponseProcessor } from "../apis/SettingsApi";
export declare class PromiseSettingsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: SettingsApiRequestFactory, responseProcessor?: SettingsApiResponseProcessor);
    getAllWithHttpInfo(appId: number, _options?: PromiseConfigurationOptions): Promise<HttpInfo<EventDetailSettings>>;
    getAll(appId: number, _options?: PromiseConfigurationOptions): Promise<EventDetailSettings>;
    updateWithHttpInfo(appId: number, eventDetailSettingsUrl: EventDetailSettingsUrl, _options?: PromiseConfigurationOptions): Promise<HttpInfo<EventDetailSettings>>;
    update(appId: number, eventDetailSettingsUrl: EventDetailSettingsUrl, _options?: PromiseConfigurationOptions): Promise<EventDetailSettings>;
}
import { SubscriberStateChangesApiRequestFactory, SubscriberStateChangesApiResponseProcessor } from "../apis/SubscriberStateChangesApi";
export declare class PromiseSubscriberStateChangesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: SubscriberStateChangesApiRequestFactory, responseProcessor?: SubscriberStateChangesApiResponseProcessor);
    upsertByContactEmailWithHttpInfo(externalEventId: string, subscriberState: string, externalAccountId: string, batchInputMarketingEventEmailSubscriber: BatchInputMarketingEventEmailSubscriber, _options?: PromiseConfigurationOptions): Promise<HttpInfo<void>>;
    upsertByContactEmail(externalEventId: string, subscriberState: string, externalAccountId: string, batchInputMarketingEventEmailSubscriber: BatchInputMarketingEventEmailSubscriber, _options?: PromiseConfigurationOptions): Promise<void>;
    upsertByContactIdWithHttpInfo(externalEventId: string, subscriberState: string, externalAccountId: string, batchInputMarketingEventSubscriber: BatchInputMarketingEventSubscriber, _options?: PromiseConfigurationOptions): Promise<HttpInfo<void>>;
    upsertByContactId(externalEventId: string, subscriberState: string, externalAccountId: string, batchInputMarketingEventSubscriber: BatchInputMarketingEventSubscriber, _options?: PromiseConfigurationOptions): Promise<void>;
}
