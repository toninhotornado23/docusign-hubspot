import { HttpFile, HttpInfo } from '../http/http';
import { Configuration, PromiseConfigurationOptions } from '../configuration';
import { CollectionResponseFile } from '../models/CollectionResponseFile';
import { CollectionResponseFolder } from '../models/CollectionResponseFolder';
import { FileActionResponse } from '../models/FileActionResponse';
import { FileStat } from '../models/FileStat';
import { FileUpdateInput } from '../models/FileUpdateInput';
import { Folder } from '../models/Folder';
import { FolderActionResponse } from '../models/FolderActionResponse';
import { FolderInput } from '../models/FolderInput';
import { FolderUpdateInput } from '../models/FolderUpdateInput';
import { FolderUpdateInputWithId } from '../models/FolderUpdateInputWithId';
import { FolderUpdateTaskLocator } from '../models/FolderUpdateTaskLocator';
import { ImportFromUrlInput } from '../models/ImportFromUrlInput';
import { ImportFromUrlTaskLocator } from '../models/ImportFromUrlTaskLocator';
import { SignedUrl } from '../models/SignedUrl';
import { FilesApiRequestFactory, FilesApiResponseProcessor } from "../apis/FilesApi";
export declare class PromiseFilesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: FilesApiRequestFactory, responseProcessor?: FilesApiResponseProcessor);
    _deleteWithHttpInfo(fileId: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<void>>;
    _delete(fileId: string, _options?: PromiseConfigurationOptions): Promise<void>;
    archiveWithHttpInfo(fileId: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<void>>;
    archive(fileId: string, _options?: PromiseConfigurationOptions): Promise<void>;
    checkImportWithHttpInfo(taskId: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<FileActionResponse>>;
    checkImport(taskId: string, _options?: PromiseConfigurationOptions): Promise<FileActionResponse>;
    doSearchWithHttpInfo(properties?: Array<string>, after?: string, before?: string, limit?: number, sort?: Array<string>, ids?: Array<number>, idLte?: number, idGte?: number, createdAt?: Date, createdAtLte?: Date, createdAtGte?: Date, updatedAt?: Date, updatedAtLte?: Date, updatedAtGte?: Date, name?: string, path?: string, parentFolderIds?: Array<number>, size?: number, sizeLte?: number, sizeGte?: number, height?: number, heightLte?: number, heightGte?: number, width?: number, widthLte?: number, widthGte?: number, encoding?: string, type?: string, extension?: string, url?: string, isUsableInContent?: boolean, allowsAnonymousAccess?: boolean, fileMd5?: string, expiresAt?: Date, expiresAtLte?: Date, expiresAtGte?: Date, _options?: PromiseConfigurationOptions): Promise<HttpInfo<CollectionResponseFile>>;
    doSearch(properties?: Array<string>, after?: string, before?: string, limit?: number, sort?: Array<string>, ids?: Array<number>, idLte?: number, idGte?: number, createdAt?: Date, createdAtLte?: Date, createdAtGte?: Date, updatedAt?: Date, updatedAtLte?: Date, updatedAtGte?: Date, name?: string, path?: string, parentFolderIds?: Array<number>, size?: number, sizeLte?: number, sizeGte?: number, height?: number, heightLte?: number, heightGte?: number, width?: number, widthLte?: number, widthGte?: number, encoding?: string, type?: string, extension?: string, url?: string, isUsableInContent?: boolean, allowsAnonymousAccess?: boolean, fileMd5?: string, expiresAt?: Date, expiresAtLte?: Date, expiresAtGte?: Date, _options?: PromiseConfigurationOptions): Promise<CollectionResponseFile>;
    getByIdWithHttpInfo(fileId: string, properties?: Array<string>, _options?: PromiseConfigurationOptions): Promise<HttpInfo<any>>;
    getById(fileId: string, properties?: Array<string>, _options?: PromiseConfigurationOptions): Promise<any>;
    getMetadataWithHttpInfo(path: string, properties?: Array<string>, _options?: PromiseConfigurationOptions): Promise<HttpInfo<FileStat>>;
    getMetadata(path: string, properties?: Array<string>, _options?: PromiseConfigurationOptions): Promise<FileStat>;
    getSignedUrlWithHttpInfo(fileId: string, size?: 'thumb' | 'icon' | 'medium' | 'preview', expirationSeconds?: number, upscale?: boolean, _options?: PromiseConfigurationOptions): Promise<HttpInfo<SignedUrl>>;
    getSignedUrl(fileId: string, size?: 'thumb' | 'icon' | 'medium' | 'preview', expirationSeconds?: number, upscale?: boolean, _options?: PromiseConfigurationOptions): Promise<SignedUrl>;
    importFromUrlWithHttpInfo(importFromUrlInput: ImportFromUrlInput, _options?: PromiseConfigurationOptions): Promise<HttpInfo<ImportFromUrlTaskLocator>>;
    importFromUrl(importFromUrlInput: ImportFromUrlInput, _options?: PromiseConfigurationOptions): Promise<ImportFromUrlTaskLocator>;
    replaceWithHttpInfo(fileId: string, file?: HttpFile, charsetHunch?: string, options?: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<any>>;
    replace(fileId: string, file?: HttpFile, charsetHunch?: string, options?: string, _options?: PromiseConfigurationOptions): Promise<any>;
    updatePropertiesWithHttpInfo(fileId: string, fileUpdateInput: FileUpdateInput, _options?: PromiseConfigurationOptions): Promise<HttpInfo<any>>;
    updateProperties(fileId: string, fileUpdateInput: FileUpdateInput, _options?: PromiseConfigurationOptions): Promise<any>;
    uploadWithHttpInfo(file?: HttpFile, folderId?: string, folderPath?: string, fileName?: string, charsetHunch?: string, options?: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<any>>;
    upload(file?: HttpFile, folderId?: string, folderPath?: string, fileName?: string, charsetHunch?: string, options?: string, _options?: PromiseConfigurationOptions): Promise<any>;
}
import { FoldersApiRequestFactory, FoldersApiResponseProcessor } from "../apis/FoldersApi";
export declare class PromiseFoldersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: FoldersApiRequestFactory, responseProcessor?: FoldersApiResponseProcessor);
    archiveWithHttpInfo(folderId: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<void>>;
    archive(folderId: string, _options?: PromiseConfigurationOptions): Promise<void>;
    archiveByPathWithHttpInfo(folderPath: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<void>>;
    archiveByPath(folderPath: string, _options?: PromiseConfigurationOptions): Promise<void>;
    checkUpdateStatusWithHttpInfo(taskId: string, _options?: PromiseConfigurationOptions): Promise<HttpInfo<FolderActionResponse>>;
    checkUpdateStatus(taskId: string, _options?: PromiseConfigurationOptions): Promise<FolderActionResponse>;
    createWithHttpInfo(folderInput: FolderInput, _options?: PromiseConfigurationOptions): Promise<HttpInfo<Folder>>;
    create(folderInput: FolderInput, _options?: PromiseConfigurationOptions): Promise<Folder>;
    doSearchWithHttpInfo(properties?: Array<string>, after?: string, before?: string, limit?: number, sort?: Array<string>, ids?: Array<number>, idLte?: number, idGte?: number, createdAt?: Date, createdAtLte?: Date, createdAtGte?: Date, updatedAt?: Date, updatedAtLte?: Date, updatedAtGte?: Date, name?: string, path?: string, parentFolderIds?: Array<number>, _options?: PromiseConfigurationOptions): Promise<HttpInfo<CollectionResponseFolder>>;
    doSearch(properties?: Array<string>, after?: string, before?: string, limit?: number, sort?: Array<string>, ids?: Array<number>, idLte?: number, idGte?: number, createdAt?: Date, createdAtLte?: Date, createdAtGte?: Date, updatedAt?: Date, updatedAtLte?: Date, updatedAtGte?: Date, name?: string, path?: string, parentFolderIds?: Array<number>, _options?: PromiseConfigurationOptions): Promise<CollectionResponseFolder>;
    getByIdWithHttpInfo(folderId: string, properties?: Array<string>, _options?: PromiseConfigurationOptions): Promise<HttpInfo<Folder>>;
    getById(folderId: string, properties?: Array<string>, _options?: PromiseConfigurationOptions): Promise<Folder>;
    getByPathWithHttpInfo(folderPath: string, properties?: Array<string>, _options?: PromiseConfigurationOptions): Promise<HttpInfo<Folder>>;
    getByPath(folderPath: string, properties?: Array<string>, _options?: PromiseConfigurationOptions): Promise<Folder>;
    updatePropertiesWithHttpInfo(folderId: string, folderUpdateInput: FolderUpdateInput, _options?: PromiseConfigurationOptions): Promise<HttpInfo<Folder>>;
    updateProperties(folderId: string, folderUpdateInput: FolderUpdateInput, _options?: PromiseConfigurationOptions): Promise<Folder>;
    updatePropertiesRecursivelyWithHttpInfo(folderUpdateInputWithId: FolderUpdateInputWithId, _options?: PromiseConfigurationOptions): Promise<HttpInfo<FolderUpdateTaskLocator>>;
    updatePropertiesRecursively(folderUpdateInputWithId: FolderUpdateInputWithId, _options?: PromiseConfigurationOptions): Promise<FolderUpdateTaskLocator>;
}
