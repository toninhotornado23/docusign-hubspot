import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext, HttpFile, HttpInfo } from '../http/http';
import { CollectionResponseFile } from '../models/CollectionResponseFile';
import { FileActionResponse } from '../models/FileActionResponse';
import { FileStat } from '../models/FileStat';
import { FileUpdateInput } from '../models/FileUpdateInput';
import { ImportFromUrlInput } from '../models/ImportFromUrlInput';
import { ImportFromUrlTaskLocator } from '../models/ImportFromUrlTaskLocator';
import { SignedUrl } from '../models/SignedUrl';
export declare class FilesApiRequestFactory extends BaseAPIRequestFactory {
    _delete(fileId: string, _options?: Configuration): Promise<RequestContext>;
    archive(fileId: string, _options?: Configuration): Promise<RequestContext>;
    checkImport(taskId: string, _options?: Configuration): Promise<RequestContext>;
    doSearch(properties?: Array<string>, after?: string, before?: string, limit?: number, sort?: Array<string>, ids?: Array<number>, idLte?: number, idGte?: number, createdAt?: Date, createdAtLte?: Date, createdAtGte?: Date, updatedAt?: Date, updatedAtLte?: Date, updatedAtGte?: Date, name?: string, path?: string, parentFolderIds?: Array<number>, size?: number, sizeLte?: number, sizeGte?: number, height?: number, heightLte?: number, heightGte?: number, width?: number, widthLte?: number, widthGte?: number, encoding?: string, type?: string, extension?: string, url?: string, isUsableInContent?: boolean, allowsAnonymousAccess?: boolean, fileMd5?: string, expiresAt?: Date, expiresAtLte?: Date, expiresAtGte?: Date, _options?: Configuration): Promise<RequestContext>;
    getById(fileId: string, properties?: Array<string>, _options?: Configuration): Promise<RequestContext>;
    getMetadata(path: string, properties?: Array<string>, _options?: Configuration): Promise<RequestContext>;
    getSignedUrl(fileId: string, size?: 'thumb' | 'icon' | 'medium' | 'preview', expirationSeconds?: number, upscale?: boolean, _options?: Configuration): Promise<RequestContext>;
    importFromUrl(importFromUrlInput: ImportFromUrlInput, _options?: Configuration): Promise<RequestContext>;
    replace(fileId: string, file?: HttpFile, charsetHunch?: string, options?: string, _options?: Configuration): Promise<RequestContext>;
    updateProperties(fileId: string, fileUpdateInput: FileUpdateInput, _options?: Configuration): Promise<RequestContext>;
    upload(file?: HttpFile, folderId?: string, folderPath?: string, fileName?: string, charsetHunch?: string, options?: string, _options?: Configuration): Promise<RequestContext>;
}
export declare class FilesApiResponseProcessor {
    _deleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    archiveWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    checkImportWithHttpInfo(response: ResponseContext): Promise<HttpInfo<FileActionResponse>>;
    doSearchWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CollectionResponseFile>>;
    getByIdWithHttpInfo(response: ResponseContext): Promise<HttpInfo<any>>;
    getMetadataWithHttpInfo(response: ResponseContext): Promise<HttpInfo<FileStat>>;
    getSignedUrlWithHttpInfo(response: ResponseContext): Promise<HttpInfo<SignedUrl>>;
    importFromUrlWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ImportFromUrlTaskLocator>>;
    replaceWithHttpInfo(response: ResponseContext): Promise<HttpInfo<any>>;
    updatePropertiesWithHttpInfo(response: ResponseContext): Promise<HttpInfo<any>>;
    uploadWithHttpInfo(response: ResponseContext): Promise<HttpInfo<any>>;
}
