import { HttpInfo } from '../http/http';
import { Configuration, ConfigurationOptions } from '../configuration';
import { AccessTokenInfoResponse } from '../models/AccessTokenInfoResponse';
import { RefreshTokenInfoResponse } from '../models/RefreshTokenInfoResponse';
import { TokenResponseIF } from '../models/TokenResponseIF';
import { AccessTokensApiRequestFactory, AccessTokensApiResponseProcessor } from "../apis/AccessTokensApi";
export interface AccessTokensApiGetRequest {
    token: string;
}
export declare class ObjectAccessTokensApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: AccessTokensApiRequestFactory, responseProcessor?: AccessTokensApiResponseProcessor);
    getWithHttpInfo(param: AccessTokensApiGetRequest, options?: ConfigurationOptions): Promise<HttpInfo<AccessTokenInfoResponse>>;
    get(param: AccessTokensApiGetRequest, options?: ConfigurationOptions): Promise<AccessTokenInfoResponse>;
}
import { RefreshTokensApiRequestFactory, RefreshTokensApiResponseProcessor } from "../apis/RefreshTokensApi";
export interface RefreshTokensApiArchiveRequest {
    token: string;
}
export interface RefreshTokensApiGetRequest {
    token: string;
}
export declare class ObjectRefreshTokensApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: RefreshTokensApiRequestFactory, responseProcessor?: RefreshTokensApiResponseProcessor);
    archiveWithHttpInfo(param: RefreshTokensApiArchiveRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    archive(param: RefreshTokensApiArchiveRequest, options?: ConfigurationOptions): Promise<void>;
    getWithHttpInfo(param: RefreshTokensApiGetRequest, options?: ConfigurationOptions): Promise<HttpInfo<RefreshTokenInfoResponse>>;
    get(param: RefreshTokensApiGetRequest, options?: ConfigurationOptions): Promise<RefreshTokenInfoResponse>;
}
import { TokensApiRequestFactory, TokensApiResponseProcessor } from "../apis/TokensApi";
export interface TokensApiCreateRequest {
    grantType?: string;
    code?: string;
    redirectUri?: string;
    clientId?: string;
    clientSecret?: string;
    refreshToken?: string;
}
export declare class ObjectTokensApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: TokensApiRequestFactory, responseProcessor?: TokensApiResponseProcessor);
    createWithHttpInfo(param?: TokensApiCreateRequest, options?: ConfigurationOptions): Promise<HttpInfo<TokenResponseIF>>;
    create(param?: TokensApiCreateRequest, options?: ConfigurationOptions): Promise<TokenResponseIF>;
}
