import { HttpInfo } from '../http/http';
import { Configuration, ConfigurationOptions } from '../configuration';
import { BatchedBehavioralEventHttpCompletionRequest } from '../models/BatchedBehavioralEventHttpCompletionRequest';
import { BehavioralEventHttpCompletionRequest } from '../models/BehavioralEventHttpCompletionRequest';
import { BasicApiRequestFactory, BasicApiResponseProcessor } from "../apis/BasicApi";
export interface BasicApiSendRequest {
    behavioralEventHttpCompletionRequest: BehavioralEventHttpCompletionRequest;
}
export declare class ObjectBasicApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BasicApiRequestFactory, responseProcessor?: BasicApiResponseProcessor);
    sendWithHttpInfo(param: BasicApiSendRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    send(param: BasicApiSendRequest, options?: ConfigurationOptions): Promise<void>;
}
import { BatchApiRequestFactory, BatchApiResponseProcessor } from "../apis/BatchApi";
export interface BatchApiSendRequest {
    batchedBehavioralEventHttpCompletionRequest: BatchedBehavioralEventHttpCompletionRequest;
}
export declare class ObjectBatchApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BatchApiRequestFactory, responseProcessor?: BatchApiResponseProcessor);
    sendWithHttpInfo(param: BatchApiSendRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    send(param: BatchApiSendRequest, options?: ConfigurationOptions): Promise<void>;
}
