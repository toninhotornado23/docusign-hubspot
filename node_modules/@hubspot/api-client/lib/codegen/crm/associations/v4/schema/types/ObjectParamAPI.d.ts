import { HttpInfo } from '../http/http';
import { Configuration, ConfigurationOptions } from '../configuration';
import { BatchInputPublicAssociationDefinitionConfigurationCreateRequest } from '../models/BatchInputPublicAssociationDefinitionConfigurationCreateRequest';
import { BatchInputPublicAssociationDefinitionConfigurationUpdateRequest } from '../models/BatchInputPublicAssociationDefinitionConfigurationUpdateRequest';
import { BatchInputPublicAssociationSpec } from '../models/BatchInputPublicAssociationSpec';
import { BatchResponsePublicAssociationDefinitionConfigurationUpdateResult } from '../models/BatchResponsePublicAssociationDefinitionConfigurationUpdateResult';
import { BatchResponsePublicAssociationDefinitionConfigurationUpdateResultWithErrors } from '../models/BatchResponsePublicAssociationDefinitionConfigurationUpdateResultWithErrors';
import { BatchResponsePublicAssociationDefinitionUserConfiguration } from '../models/BatchResponsePublicAssociationDefinitionUserConfiguration';
import { BatchResponsePublicAssociationDefinitionUserConfigurationWithErrors } from '../models/BatchResponsePublicAssociationDefinitionUserConfigurationWithErrors';
import { CollectionResponseAssociationSpecWithLabelNoPaging } from '../models/CollectionResponseAssociationSpecWithLabelNoPaging';
import { CollectionResponsePublicAssociationDefinitionUserConfigurationNoPaging } from '../models/CollectionResponsePublicAssociationDefinitionUserConfigurationNoPaging';
import { PublicAssociationDefinitionCreateRequest } from '../models/PublicAssociationDefinitionCreateRequest';
import { PublicAssociationDefinitionUpdateRequest } from '../models/PublicAssociationDefinitionUpdateRequest';
import { DefinitionConfigurationsApiRequestFactory, DefinitionConfigurationsApiResponseProcessor } from "../apis/DefinitionConfigurationsApi";
export interface DefinitionConfigurationsApiBatchCreateRequest {
    fromObjectType: string;
    toObjectType: string;
    batchInputPublicAssociationDefinitionConfigurationCreateRequest: BatchInputPublicAssociationDefinitionConfigurationCreateRequest;
}
export interface DefinitionConfigurationsApiBatchRemoveRequest {
    fromObjectType: string;
    toObjectType: string;
    batchInputPublicAssociationSpec: BatchInputPublicAssociationSpec;
}
export interface DefinitionConfigurationsApiBatchUpdateRequest {
    fromObjectType: string;
    toObjectType: string;
    batchInputPublicAssociationDefinitionConfigurationUpdateRequest: BatchInputPublicAssociationDefinitionConfigurationUpdateRequest;
}
export interface DefinitionConfigurationsApiGetAllRequest {
}
export interface DefinitionConfigurationsApiGetAllBetweenTwoObjectTypesRequest {
    fromObjectType: string;
    toObjectType: string;
}
export declare class ObjectDefinitionConfigurationsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: DefinitionConfigurationsApiRequestFactory, responseProcessor?: DefinitionConfigurationsApiResponseProcessor);
    batchCreateWithHttpInfo(param: DefinitionConfigurationsApiBatchCreateRequest, options?: ConfigurationOptions): Promise<HttpInfo<BatchResponsePublicAssociationDefinitionUserConfigurationWithErrors | BatchResponsePublicAssociationDefinitionUserConfiguration>>;
    batchCreate(param: DefinitionConfigurationsApiBatchCreateRequest, options?: ConfigurationOptions): Promise<BatchResponsePublicAssociationDefinitionUserConfigurationWithErrors | BatchResponsePublicAssociationDefinitionUserConfiguration>;
    batchRemoveWithHttpInfo(param: DefinitionConfigurationsApiBatchRemoveRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    batchRemove(param: DefinitionConfigurationsApiBatchRemoveRequest, options?: ConfigurationOptions): Promise<void>;
    batchUpdateWithHttpInfo(param: DefinitionConfigurationsApiBatchUpdateRequest, options?: ConfigurationOptions): Promise<HttpInfo<BatchResponsePublicAssociationDefinitionConfigurationUpdateResult | BatchResponsePublicAssociationDefinitionConfigurationUpdateResultWithErrors>>;
    batchUpdate(param: DefinitionConfigurationsApiBatchUpdateRequest, options?: ConfigurationOptions): Promise<BatchResponsePublicAssociationDefinitionConfigurationUpdateResult | BatchResponsePublicAssociationDefinitionConfigurationUpdateResultWithErrors>;
    getAllWithHttpInfo(param?: DefinitionConfigurationsApiGetAllRequest, options?: ConfigurationOptions): Promise<HttpInfo<CollectionResponsePublicAssociationDefinitionUserConfigurationNoPaging>>;
    getAll(param?: DefinitionConfigurationsApiGetAllRequest, options?: ConfigurationOptions): Promise<CollectionResponsePublicAssociationDefinitionUserConfigurationNoPaging>;
    getAllBetweenTwoObjectTypesWithHttpInfo(param: DefinitionConfigurationsApiGetAllBetweenTwoObjectTypesRequest, options?: ConfigurationOptions): Promise<HttpInfo<CollectionResponsePublicAssociationDefinitionUserConfigurationNoPaging>>;
    getAllBetweenTwoObjectTypes(param: DefinitionConfigurationsApiGetAllBetweenTwoObjectTypesRequest, options?: ConfigurationOptions): Promise<CollectionResponsePublicAssociationDefinitionUserConfigurationNoPaging>;
}
import { DefinitionsApiRequestFactory, DefinitionsApiResponseProcessor } from "../apis/DefinitionsApi";
export interface DefinitionsApiCreateRequest {
    fromObjectType: string;
    toObjectType: string;
    publicAssociationDefinitionCreateRequest: PublicAssociationDefinitionCreateRequest;
}
export interface DefinitionsApiGetAllRequest {
    fromObjectType: string;
    toObjectType: string;
}
export interface DefinitionsApiRemoveRequest {
    fromObjectType: string;
    toObjectType: string;
    associationTypeId: number;
}
export interface DefinitionsApiUpdateRequest {
    fromObjectType: string;
    toObjectType: string;
    publicAssociationDefinitionUpdateRequest: PublicAssociationDefinitionUpdateRequest;
}
export declare class ObjectDefinitionsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: DefinitionsApiRequestFactory, responseProcessor?: DefinitionsApiResponseProcessor);
    createWithHttpInfo(param: DefinitionsApiCreateRequest, options?: ConfigurationOptions): Promise<HttpInfo<CollectionResponseAssociationSpecWithLabelNoPaging>>;
    create(param: DefinitionsApiCreateRequest, options?: ConfigurationOptions): Promise<CollectionResponseAssociationSpecWithLabelNoPaging>;
    getAllWithHttpInfo(param: DefinitionsApiGetAllRequest, options?: ConfigurationOptions): Promise<HttpInfo<CollectionResponseAssociationSpecWithLabelNoPaging>>;
    getAll(param: DefinitionsApiGetAllRequest, options?: ConfigurationOptions): Promise<CollectionResponseAssociationSpecWithLabelNoPaging>;
    removeWithHttpInfo(param: DefinitionsApiRemoveRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    remove(param: DefinitionsApiRemoveRequest, options?: ConfigurationOptions): Promise<void>;
    updateWithHttpInfo(param: DefinitionsApiUpdateRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    update(param: DefinitionsApiUpdateRequest, options?: ConfigurationOptions): Promise<void>;
}
