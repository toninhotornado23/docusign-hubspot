"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectDefinitionsApi = exports.ObjectDefinitionConfigurationsApi = void 0;
const ObservableAPI_1 = require("./ObservableAPI");
class ObjectDefinitionConfigurationsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_1.ObservableDefinitionConfigurationsApi(configuration, requestFactory, responseProcessor);
    }
    batchCreateWithHttpInfo(param, options) {
        return this.api.batchCreateWithHttpInfo(param.fromObjectType, param.toObjectType, param.batchInputPublicAssociationDefinitionConfigurationCreateRequest, options).toPromise();
    }
    batchCreate(param, options) {
        return this.api.batchCreate(param.fromObjectType, param.toObjectType, param.batchInputPublicAssociationDefinitionConfigurationCreateRequest, options).toPromise();
    }
    batchRemoveWithHttpInfo(param, options) {
        return this.api.batchRemoveWithHttpInfo(param.fromObjectType, param.toObjectType, param.batchInputPublicAssociationSpec, options).toPromise();
    }
    batchRemove(param, options) {
        return this.api.batchRemove(param.fromObjectType, param.toObjectType, param.batchInputPublicAssociationSpec, options).toPromise();
    }
    batchUpdateWithHttpInfo(param, options) {
        return this.api.batchUpdateWithHttpInfo(param.fromObjectType, param.toObjectType, param.batchInputPublicAssociationDefinitionConfigurationUpdateRequest, options).toPromise();
    }
    batchUpdate(param, options) {
        return this.api.batchUpdate(param.fromObjectType, param.toObjectType, param.batchInputPublicAssociationDefinitionConfigurationUpdateRequest, options).toPromise();
    }
    getAllWithHttpInfo(param = {}, options) {
        return this.api.getAllWithHttpInfo(options).toPromise();
    }
    getAll(param = {}, options) {
        return this.api.getAll(options).toPromise();
    }
    getAllBetweenTwoObjectTypesWithHttpInfo(param, options) {
        return this.api.getAllBetweenTwoObjectTypesWithHttpInfo(param.fromObjectType, param.toObjectType, options).toPromise();
    }
    getAllBetweenTwoObjectTypes(param, options) {
        return this.api.getAllBetweenTwoObjectTypes(param.fromObjectType, param.toObjectType, options).toPromise();
    }
}
exports.ObjectDefinitionConfigurationsApi = ObjectDefinitionConfigurationsApi;
const ObservableAPI_2 = require("./ObservableAPI");
class ObjectDefinitionsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_2.ObservableDefinitionsApi(configuration, requestFactory, responseProcessor);
    }
    createWithHttpInfo(param, options) {
        return this.api.createWithHttpInfo(param.fromObjectType, param.toObjectType, param.publicAssociationDefinitionCreateRequest, options).toPromise();
    }
    create(param, options) {
        return this.api.create(param.fromObjectType, param.toObjectType, param.publicAssociationDefinitionCreateRequest, options).toPromise();
    }
    getAllWithHttpInfo(param, options) {
        return this.api.getAllWithHttpInfo(param.fromObjectType, param.toObjectType, options).toPromise();
    }
    getAll(param, options) {
        return this.api.getAll(param.fromObjectType, param.toObjectType, options).toPromise();
    }
    removeWithHttpInfo(param, options) {
        return this.api.removeWithHttpInfo(param.fromObjectType, param.toObjectType, param.associationTypeId, options).toPromise();
    }
    remove(param, options) {
        return this.api.remove(param.fromObjectType, param.toObjectType, param.associationTypeId, options).toPromise();
    }
    updateWithHttpInfo(param, options) {
        return this.api.updateWithHttpInfo(param.fromObjectType, param.toObjectType, param.publicAssociationDefinitionUpdateRequest, options).toPromise();
    }
    update(param, options) {
        return this.api.update(param.fromObjectType, param.toObjectType, param.publicAssociationDefinitionUpdateRequest, options).toPromise();
    }
}
exports.ObjectDefinitionsApi = ObjectDefinitionsApi;
//# sourceMappingURL=ObjectParamAPI.js.map