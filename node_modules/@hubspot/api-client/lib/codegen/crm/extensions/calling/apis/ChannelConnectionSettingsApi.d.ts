import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext, HttpInfo } from '../http/http';
import { ChannelConnectionSettingsPatchRequest } from '../models/ChannelConnectionSettingsPatchRequest';
import { ChannelConnectionSettingsRequest } from '../models/ChannelConnectionSettingsRequest';
import { ChannelConnectionSettingsResponse } from '../models/ChannelConnectionSettingsResponse';
export declare class ChannelConnectionSettingsApiRequestFactory extends BaseAPIRequestFactory {
    archive(appId: number, _options?: Configuration): Promise<RequestContext>;
    create(appId: number, channelConnectionSettingsRequest: ChannelConnectionSettingsRequest, _options?: Configuration): Promise<RequestContext>;
    getById(appId: number, _options?: Configuration): Promise<RequestContext>;
    update(appId: number, channelConnectionSettingsPatchRequest: ChannelConnectionSettingsPatchRequest, _options?: Configuration): Promise<RequestContext>;
}
export declare class ChannelConnectionSettingsApiResponseProcessor {
    archiveWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    createWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ChannelConnectionSettingsResponse>>;
    getByIdWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ChannelConnectionSettingsResponse>>;
    updateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ChannelConnectionSettingsResponse>>;
}
