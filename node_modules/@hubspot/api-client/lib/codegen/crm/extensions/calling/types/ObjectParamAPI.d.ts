import { HttpInfo } from '../http/http';
import { Configuration, ConfigurationOptions } from '../configuration';
import { ChannelConnectionSettingsPatchRequest } from '../models/ChannelConnectionSettingsPatchRequest';
import { ChannelConnectionSettingsRequest } from '../models/ChannelConnectionSettingsRequest';
import { ChannelConnectionSettingsResponse } from '../models/ChannelConnectionSettingsResponse';
import { MarkRecordingAsReadyRequest } from '../models/MarkRecordingAsReadyRequest';
import { RecordingSettingsPatchRequest } from '../models/RecordingSettingsPatchRequest';
import { RecordingSettingsRequest } from '../models/RecordingSettingsRequest';
import { RecordingSettingsResponse } from '../models/RecordingSettingsResponse';
import { SettingsPatchRequest } from '../models/SettingsPatchRequest';
import { SettingsRequest } from '../models/SettingsRequest';
import { SettingsResponse } from '../models/SettingsResponse';
import { ChannelConnectionSettingsApiRequestFactory, ChannelConnectionSettingsApiResponseProcessor } from "../apis/ChannelConnectionSettingsApi";
export interface ChannelConnectionSettingsApiArchiveRequest {
    appId: number;
}
export interface ChannelConnectionSettingsApiCreateRequest {
    appId: number;
    channelConnectionSettingsRequest: ChannelConnectionSettingsRequest;
}
export interface ChannelConnectionSettingsApiGetByIdRequest {
    appId: number;
}
export interface ChannelConnectionSettingsApiUpdateRequest {
    appId: number;
    channelConnectionSettingsPatchRequest: ChannelConnectionSettingsPatchRequest;
}
export declare class ObjectChannelConnectionSettingsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: ChannelConnectionSettingsApiRequestFactory, responseProcessor?: ChannelConnectionSettingsApiResponseProcessor);
    archiveWithHttpInfo(param: ChannelConnectionSettingsApiArchiveRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    archive(param: ChannelConnectionSettingsApiArchiveRequest, options?: ConfigurationOptions): Promise<void>;
    createWithHttpInfo(param: ChannelConnectionSettingsApiCreateRequest, options?: ConfigurationOptions): Promise<HttpInfo<ChannelConnectionSettingsResponse>>;
    create(param: ChannelConnectionSettingsApiCreateRequest, options?: ConfigurationOptions): Promise<ChannelConnectionSettingsResponse>;
    getByIdWithHttpInfo(param: ChannelConnectionSettingsApiGetByIdRequest, options?: ConfigurationOptions): Promise<HttpInfo<ChannelConnectionSettingsResponse>>;
    getById(param: ChannelConnectionSettingsApiGetByIdRequest, options?: ConfigurationOptions): Promise<ChannelConnectionSettingsResponse>;
    updateWithHttpInfo(param: ChannelConnectionSettingsApiUpdateRequest, options?: ConfigurationOptions): Promise<HttpInfo<ChannelConnectionSettingsResponse>>;
    update(param: ChannelConnectionSettingsApiUpdateRequest, options?: ConfigurationOptions): Promise<ChannelConnectionSettingsResponse>;
}
import { RecordingSettingsApiRequestFactory, RecordingSettingsApiResponseProcessor } from "../apis/RecordingSettingsApi";
export interface RecordingSettingsApiGetUrlFormatRequest {
    appId: number;
}
export interface RecordingSettingsApiMarkAsReadyRequest {
    markRecordingAsReadyRequest: MarkRecordingAsReadyRequest;
}
export interface RecordingSettingsApiRegisterUrlFormatRequest {
    appId: number;
    recordingSettingsRequest: RecordingSettingsRequest;
}
export interface RecordingSettingsApiUpdateUrlFormatRequest {
    appId: number;
    recordingSettingsPatchRequest: RecordingSettingsPatchRequest;
}
export declare class ObjectRecordingSettingsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: RecordingSettingsApiRequestFactory, responseProcessor?: RecordingSettingsApiResponseProcessor);
    getUrlFormatWithHttpInfo(param: RecordingSettingsApiGetUrlFormatRequest, options?: ConfigurationOptions): Promise<HttpInfo<RecordingSettingsResponse>>;
    getUrlFormat(param: RecordingSettingsApiGetUrlFormatRequest, options?: ConfigurationOptions): Promise<RecordingSettingsResponse>;
    markAsReadyWithHttpInfo(param: RecordingSettingsApiMarkAsReadyRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    markAsReady(param: RecordingSettingsApiMarkAsReadyRequest, options?: ConfigurationOptions): Promise<void>;
    registerUrlFormatWithHttpInfo(param: RecordingSettingsApiRegisterUrlFormatRequest, options?: ConfigurationOptions): Promise<HttpInfo<RecordingSettingsResponse>>;
    registerUrlFormat(param: RecordingSettingsApiRegisterUrlFormatRequest, options?: ConfigurationOptions): Promise<RecordingSettingsResponse>;
    updateUrlFormatWithHttpInfo(param: RecordingSettingsApiUpdateUrlFormatRequest, options?: ConfigurationOptions): Promise<HttpInfo<RecordingSettingsResponse>>;
    updateUrlFormat(param: RecordingSettingsApiUpdateUrlFormatRequest, options?: ConfigurationOptions): Promise<RecordingSettingsResponse>;
}
import { SettingsApiRequestFactory, SettingsApiResponseProcessor } from "../apis/SettingsApi";
export interface SettingsApiArchiveRequest {
    appId: number;
}
export interface SettingsApiCreateRequest {
    appId: number;
    settingsRequest: SettingsRequest;
}
export interface SettingsApiGetByIdRequest {
    appId: number;
}
export interface SettingsApiUpdateRequest {
    appId: number;
    settingsPatchRequest: SettingsPatchRequest;
}
export declare class ObjectSettingsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: SettingsApiRequestFactory, responseProcessor?: SettingsApiResponseProcessor);
    archiveWithHttpInfo(param: SettingsApiArchiveRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    archive(param: SettingsApiArchiveRequest, options?: ConfigurationOptions): Promise<void>;
    createWithHttpInfo(param: SettingsApiCreateRequest, options?: ConfigurationOptions): Promise<HttpInfo<SettingsResponse>>;
    create(param: SettingsApiCreateRequest, options?: ConfigurationOptions): Promise<SettingsResponse>;
    getByIdWithHttpInfo(param: SettingsApiGetByIdRequest, options?: ConfigurationOptions): Promise<HttpInfo<SettingsResponse>>;
    getById(param: SettingsApiGetByIdRequest, options?: ConfigurationOptions): Promise<SettingsResponse>;
    updateWithHttpInfo(param: SettingsApiUpdateRequest, options?: ConfigurationOptions): Promise<HttpInfo<SettingsResponse>>;
    update(param: SettingsApiUpdateRequest, options?: ConfigurationOptions): Promise<SettingsResponse>;
}
