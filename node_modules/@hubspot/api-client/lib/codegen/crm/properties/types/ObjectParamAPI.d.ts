import { HttpInfo } from '../http/http';
import { Configuration, ConfigurationOptions } from '../configuration';
import { BatchInputPropertyCreate } from '../models/BatchInputPropertyCreate';
import { BatchInputPropertyName } from '../models/BatchInputPropertyName';
import { BatchReadInputPropertyName } from '../models/BatchReadInputPropertyName';
import { BatchResponseProperty } from '../models/BatchResponseProperty';
import { BatchResponsePropertyWithErrors } from '../models/BatchResponsePropertyWithErrors';
import { CollectionResponsePropertyGroupNoPaging } from '../models/CollectionResponsePropertyGroupNoPaging';
import { CollectionResponsePropertyNoPaging } from '../models/CollectionResponsePropertyNoPaging';
import { Property } from '../models/Property';
import { PropertyCreate } from '../models/PropertyCreate';
import { PropertyGroup } from '../models/PropertyGroup';
import { PropertyGroupCreate } from '../models/PropertyGroupCreate';
import { PropertyGroupUpdate } from '../models/PropertyGroupUpdate';
import { PropertyUpdate } from '../models/PropertyUpdate';
import { BatchApiRequestFactory, BatchApiResponseProcessor } from "../apis/BatchApi";
export interface BatchApiArchiveRequest {
    objectType: string;
    batchInputPropertyName: BatchInputPropertyName;
}
export interface BatchApiCreateRequest {
    objectType: string;
    batchInputPropertyCreate: BatchInputPropertyCreate;
}
export interface BatchApiReadRequest {
    objectType: string;
    batchReadInputPropertyName: BatchReadInputPropertyName;
}
export declare class ObjectBatchApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BatchApiRequestFactory, responseProcessor?: BatchApiResponseProcessor);
    archiveWithHttpInfo(param: BatchApiArchiveRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    archive(param: BatchApiArchiveRequest, options?: ConfigurationOptions): Promise<void>;
    createWithHttpInfo(param: BatchApiCreateRequest, options?: ConfigurationOptions): Promise<HttpInfo<BatchResponseProperty | BatchResponsePropertyWithErrors>>;
    create(param: BatchApiCreateRequest, options?: ConfigurationOptions): Promise<BatchResponseProperty | BatchResponsePropertyWithErrors>;
    readWithHttpInfo(param: BatchApiReadRequest, options?: ConfigurationOptions): Promise<HttpInfo<BatchResponseProperty | BatchResponsePropertyWithErrors>>;
    read(param: BatchApiReadRequest, options?: ConfigurationOptions): Promise<BatchResponseProperty | BatchResponsePropertyWithErrors>;
}
import { CoreApiRequestFactory, CoreApiResponseProcessor } from "../apis/CoreApi";
export interface CoreApiArchiveRequest {
    objectType: string;
    propertyName: string;
}
export interface CoreApiCreateRequest {
    objectType: string;
    propertyCreate: PropertyCreate;
}
export interface CoreApiGetAllRequest {
    objectType: string;
    archived?: boolean;
    properties?: string;
}
export interface CoreApiGetByNameRequest {
    objectType: string;
    propertyName: string;
    archived?: boolean;
    properties?: string;
}
export interface CoreApiUpdateRequest {
    objectType: string;
    propertyName: string;
    propertyUpdate: PropertyUpdate;
}
export declare class ObjectCoreApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CoreApiRequestFactory, responseProcessor?: CoreApiResponseProcessor);
    archiveWithHttpInfo(param: CoreApiArchiveRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    archive(param: CoreApiArchiveRequest, options?: ConfigurationOptions): Promise<void>;
    createWithHttpInfo(param: CoreApiCreateRequest, options?: ConfigurationOptions): Promise<HttpInfo<Property>>;
    create(param: CoreApiCreateRequest, options?: ConfigurationOptions): Promise<Property>;
    getAllWithHttpInfo(param: CoreApiGetAllRequest, options?: ConfigurationOptions): Promise<HttpInfo<CollectionResponsePropertyNoPaging>>;
    getAll(param: CoreApiGetAllRequest, options?: ConfigurationOptions): Promise<CollectionResponsePropertyNoPaging>;
    getByNameWithHttpInfo(param: CoreApiGetByNameRequest, options?: ConfigurationOptions): Promise<HttpInfo<Property>>;
    getByName(param: CoreApiGetByNameRequest, options?: ConfigurationOptions): Promise<Property>;
    updateWithHttpInfo(param: CoreApiUpdateRequest, options?: ConfigurationOptions): Promise<HttpInfo<Property>>;
    update(param: CoreApiUpdateRequest, options?: ConfigurationOptions): Promise<Property>;
}
import { GroupsApiRequestFactory, GroupsApiResponseProcessor } from "../apis/GroupsApi";
export interface GroupsApiArchiveRequest {
    objectType: string;
    groupName: string;
}
export interface GroupsApiCreateRequest {
    objectType: string;
    propertyGroupCreate: PropertyGroupCreate;
}
export interface GroupsApiGetAllRequest {
    objectType: string;
}
export interface GroupsApiGetByNameRequest {
    objectType: string;
    groupName: string;
}
export interface GroupsApiUpdateRequest {
    objectType: string;
    groupName: string;
    propertyGroupUpdate: PropertyGroupUpdate;
}
export declare class ObjectGroupsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: GroupsApiRequestFactory, responseProcessor?: GroupsApiResponseProcessor);
    archiveWithHttpInfo(param: GroupsApiArchiveRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    archive(param: GroupsApiArchiveRequest, options?: ConfigurationOptions): Promise<void>;
    createWithHttpInfo(param: GroupsApiCreateRequest, options?: ConfigurationOptions): Promise<HttpInfo<PropertyGroup>>;
    create(param: GroupsApiCreateRequest, options?: ConfigurationOptions): Promise<PropertyGroup>;
    getAllWithHttpInfo(param: GroupsApiGetAllRequest, options?: ConfigurationOptions): Promise<HttpInfo<CollectionResponsePropertyGroupNoPaging>>;
    getAll(param: GroupsApiGetAllRequest, options?: ConfigurationOptions): Promise<CollectionResponsePropertyGroupNoPaging>;
    getByNameWithHttpInfo(param: GroupsApiGetByNameRequest, options?: ConfigurationOptions): Promise<HttpInfo<PropertyGroup>>;
    getByName(param: GroupsApiGetByNameRequest, options?: ConfigurationOptions): Promise<PropertyGroup>;
    updateWithHttpInfo(param: GroupsApiUpdateRequest, options?: ConfigurationOptions): Promise<HttpInfo<PropertyGroup>>;
    update(param: GroupsApiUpdateRequest, options?: ConfigurationOptions): Promise<PropertyGroup>;
}
