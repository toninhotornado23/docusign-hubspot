"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromisePublicExportsApi = void 0;
const middleware_1 = require("../middleware");
const ObservableAPI_1 = require("./ObservableAPI");
class PromisePublicExportsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_1.ObservablePublicExportsApi(configuration, requestFactory, responseProcessor);
    }
    getStatusWithHttpInfo(taskId, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.getStatusWithHttpInfo(taskId, observableOptions);
        return result.toPromise();
    }
    getStatus(taskId, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.getStatus(taskId, observableOptions);
        return result.toPromise();
    }
    startWithHttpInfo(publicExportRequest, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.startWithHttpInfo(publicExportRequest, observableOptions);
        return result.toPromise();
    }
    start(publicExportRequest, _options) {
        var _a;
        let observableOptions;
        if (_options) {
            observableOptions = {
                baseServer: _options.baseServer,
                httpApi: _options.httpApi,
                middleware: (_a = _options.middleware) === null || _a === void 0 ? void 0 : _a.map(m => new middleware_1.PromiseMiddlewareWrapper(m)),
                middlewareMergeStrategy: _options.middlewareMergeStrategy,
                authMethods: _options.authMethods
            };
        }
        const result = this.api.start(publicExportRequest, observableOptions);
        return result.toPromise();
    }
}
exports.PromisePublicExportsApi = PromisePublicExportsApi;
//# sourceMappingURL=PromiseAPI.js.map