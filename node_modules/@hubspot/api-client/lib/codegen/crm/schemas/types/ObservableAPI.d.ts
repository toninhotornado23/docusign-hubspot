import { HttpInfo } from '../http/http';
import { Configuration, ConfigurationOptions } from '../configuration';
import { Observable } from '../rxjsStub';
import { AssociationDefinition } from '../models/AssociationDefinition';
import { AssociationDefinitionEgg } from '../models/AssociationDefinitionEgg';
import { CollectionResponseObjectSchemaNoPaging } from '../models/CollectionResponseObjectSchemaNoPaging';
import { ObjectSchema } from '../models/ObjectSchema';
import { ObjectSchemaEgg } from '../models/ObjectSchemaEgg';
import { ObjectTypeDefinition } from '../models/ObjectTypeDefinition';
import { ObjectTypeDefinitionPatch } from '../models/ObjectTypeDefinitionPatch';
import { CoreApiRequestFactory, CoreApiResponseProcessor } from "../apis/CoreApi";
export declare class ObservableCoreApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CoreApiRequestFactory, responseProcessor?: CoreApiResponseProcessor);
    archiveWithHttpInfo(objectType: string, archived?: boolean, _options?: ConfigurationOptions): Observable<HttpInfo<void>>;
    archive(objectType: string, archived?: boolean, _options?: ConfigurationOptions): Observable<void>;
    archiveAssociationWithHttpInfo(objectType: string, associationIdentifier: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>>;
    archiveAssociation(objectType: string, associationIdentifier: string, _options?: ConfigurationOptions): Observable<void>;
    createWithHttpInfo(objectSchemaEgg: ObjectSchemaEgg, _options?: ConfigurationOptions): Observable<HttpInfo<ObjectSchema>>;
    create(objectSchemaEgg: ObjectSchemaEgg, _options?: ConfigurationOptions): Observable<ObjectSchema>;
    createAssociationWithHttpInfo(objectType: string, associationDefinitionEgg: AssociationDefinitionEgg, _options?: ConfigurationOptions): Observable<HttpInfo<AssociationDefinition>>;
    createAssociation(objectType: string, associationDefinitionEgg: AssociationDefinitionEgg, _options?: ConfigurationOptions): Observable<AssociationDefinition>;
    getAllWithHttpInfo(archived?: boolean, _options?: ConfigurationOptions): Observable<HttpInfo<CollectionResponseObjectSchemaNoPaging>>;
    getAll(archived?: boolean, _options?: ConfigurationOptions): Observable<CollectionResponseObjectSchemaNoPaging>;
    getByIdWithHttpInfo(objectType: string, _options?: ConfigurationOptions): Observable<HttpInfo<ObjectSchema>>;
    getById(objectType: string, _options?: ConfigurationOptions): Observable<ObjectSchema>;
    updateWithHttpInfo(objectType: string, objectTypeDefinitionPatch: ObjectTypeDefinitionPatch, _options?: ConfigurationOptions): Observable<HttpInfo<ObjectTypeDefinition>>;
    update(objectType: string, objectTypeDefinitionPatch: ObjectTypeDefinitionPatch, _options?: ConfigurationOptions): Observable<ObjectTypeDefinition>;
}
