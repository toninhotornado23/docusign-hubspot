import { HttpInfo } from '../http/http';
import { Configuration, ConfigurationOptions } from '../configuration';
import { Observable } from '../rxjsStub';
import { ApiCollectionResponseJoinTimeAndRecordId } from '../models/ApiCollectionResponseJoinTimeAndRecordId';
import { ApiCollectionResponseRecordListMembershipNoPaging } from '../models/ApiCollectionResponseRecordListMembershipNoPaging';
import { ListCreateRequest } from '../models/ListCreateRequest';
import { ListCreateResponse } from '../models/ListCreateResponse';
import { ListFetchResponse } from '../models/ListFetchResponse';
import { ListFilterUpdateRequest } from '../models/ListFilterUpdateRequest';
import { ListFolderCreateRequest } from '../models/ListFolderCreateRequest';
import { ListFolderCreateResponse } from '../models/ListFolderCreateResponse';
import { ListFolderFetchResponse } from '../models/ListFolderFetchResponse';
import { ListMoveRequest } from '../models/ListMoveRequest';
import { ListSearchRequest } from '../models/ListSearchRequest';
import { ListSearchResponse } from '../models/ListSearchResponse';
import { ListUpdateResponse } from '../models/ListUpdateResponse';
import { ListsByIdResponse } from '../models/ListsByIdResponse';
import { MembershipChangeRequest } from '../models/MembershipChangeRequest';
import { MembershipsUpdateResponse } from '../models/MembershipsUpdateResponse';
import { PublicBatchMigrationMapping } from '../models/PublicBatchMigrationMapping';
import { PublicMigrationMapping } from '../models/PublicMigrationMapping';
import { FoldersApiRequestFactory, FoldersApiResponseProcessor } from "../apis/FoldersApi";
export declare class ObservableFoldersApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: FoldersApiRequestFactory, responseProcessor?: FoldersApiResponseProcessor);
    createWithHttpInfo(listFolderCreateRequest: ListFolderCreateRequest, _options?: ConfigurationOptions): Observable<HttpInfo<ListFolderCreateResponse>>;
    create(listFolderCreateRequest: ListFolderCreateRequest, _options?: ConfigurationOptions): Observable<ListFolderCreateResponse>;
    getAllWithHttpInfo(folderId?: string, _options?: ConfigurationOptions): Observable<HttpInfo<ListFolderFetchResponse>>;
    getAll(folderId?: string, _options?: ConfigurationOptions): Observable<ListFolderFetchResponse>;
    moveWithHttpInfo(folderId: string, newParentFolderId: string, _options?: ConfigurationOptions): Observable<HttpInfo<ListFolderFetchResponse>>;
    move(folderId: string, newParentFolderId: string, _options?: ConfigurationOptions): Observable<ListFolderFetchResponse>;
    moveListWithHttpInfo(listMoveRequest: ListMoveRequest, _options?: ConfigurationOptions): Observable<HttpInfo<void>>;
    moveList(listMoveRequest: ListMoveRequest, _options?: ConfigurationOptions): Observable<void>;
    removeWithHttpInfo(folderId: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>>;
    remove(folderId: string, _options?: ConfigurationOptions): Observable<void>;
    renameWithHttpInfo(folderId: string, newFolderName?: string, _options?: ConfigurationOptions): Observable<HttpInfo<ListFolderFetchResponse>>;
    rename(folderId: string, newFolderName?: string, _options?: ConfigurationOptions): Observable<ListFolderFetchResponse>;
}
import { ListsApiRequestFactory, ListsApiResponseProcessor } from "../apis/ListsApi";
export declare class ObservableListsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: ListsApiRequestFactory, responseProcessor?: ListsApiResponseProcessor);
    createWithHttpInfo(listCreateRequest: ListCreateRequest, _options?: ConfigurationOptions): Observable<HttpInfo<ListCreateResponse>>;
    create(listCreateRequest: ListCreateRequest, _options?: ConfigurationOptions): Observable<ListCreateResponse>;
    doSearchWithHttpInfo(listSearchRequest: ListSearchRequest, _options?: ConfigurationOptions): Observable<HttpInfo<ListSearchResponse>>;
    doSearch(listSearchRequest: ListSearchRequest, _options?: ConfigurationOptions): Observable<ListSearchResponse>;
    getAllWithHttpInfo(listIds?: Array<string>, includeFilters?: boolean, _options?: ConfigurationOptions): Observable<HttpInfo<ListsByIdResponse>>;
    getAll(listIds?: Array<string>, includeFilters?: boolean, _options?: ConfigurationOptions): Observable<ListsByIdResponse>;
    getByIdWithHttpInfo(listId: string, includeFilters?: boolean, _options?: ConfigurationOptions): Observable<HttpInfo<ListFetchResponse>>;
    getById(listId: string, includeFilters?: boolean, _options?: ConfigurationOptions): Observable<ListFetchResponse>;
    getByNameWithHttpInfo(listName: string, objectTypeId: string, includeFilters?: boolean, _options?: ConfigurationOptions): Observable<HttpInfo<ListFetchResponse>>;
    getByName(listName: string, objectTypeId: string, includeFilters?: boolean, _options?: ConfigurationOptions): Observable<ListFetchResponse>;
    removeWithHttpInfo(listId: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>>;
    remove(listId: string, _options?: ConfigurationOptions): Observable<void>;
    restoreWithHttpInfo(listId: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>>;
    restore(listId: string, _options?: ConfigurationOptions): Observable<void>;
    updateListFiltersWithHttpInfo(listId: string, listFilterUpdateRequest: ListFilterUpdateRequest, enrollObjectsInWorkflows?: boolean, _options?: ConfigurationOptions): Observable<HttpInfo<ListUpdateResponse>>;
    updateListFilters(listId: string, listFilterUpdateRequest: ListFilterUpdateRequest, enrollObjectsInWorkflows?: boolean, _options?: ConfigurationOptions): Observable<ListUpdateResponse>;
    updateNameWithHttpInfo(listId: string, listName?: string, includeFilters?: boolean, _options?: ConfigurationOptions): Observable<HttpInfo<ListUpdateResponse>>;
    updateName(listId: string, listName?: string, includeFilters?: boolean, _options?: ConfigurationOptions): Observable<ListUpdateResponse>;
}
import { MappingApiRequestFactory, MappingApiResponseProcessor } from "../apis/MappingApi";
export declare class ObservableMappingApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: MappingApiRequestFactory, responseProcessor?: MappingApiResponseProcessor);
    translateLegacyListIdToListIdWithHttpInfo(legacyListId?: string, _options?: ConfigurationOptions): Observable<HttpInfo<PublicMigrationMapping>>;
    translateLegacyListIdToListId(legacyListId?: string, _options?: ConfigurationOptions): Observable<PublicMigrationMapping>;
    translateLegacyListIdToListIdBatchWithHttpInfo(requestBody: Array<string>, _options?: ConfigurationOptions): Observable<HttpInfo<PublicBatchMigrationMapping>>;
    translateLegacyListIdToListIdBatch(requestBody: Array<string>, _options?: ConfigurationOptions): Observable<PublicBatchMigrationMapping>;
}
import { MembershipsApiRequestFactory, MembershipsApiResponseProcessor } from "../apis/MembershipsApi";
export declare class ObservableMembershipsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: MembershipsApiRequestFactory, responseProcessor?: MembershipsApiResponseProcessor);
    addWithHttpInfo(listId: string, requestBody: Array<string>, _options?: ConfigurationOptions): Observable<HttpInfo<MembershipsUpdateResponse>>;
    add(listId: string, requestBody: Array<string>, _options?: ConfigurationOptions): Observable<MembershipsUpdateResponse>;
    addAllFromListWithHttpInfo(listId: string, sourceListId: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>>;
    addAllFromList(listId: string, sourceListId: string, _options?: ConfigurationOptions): Observable<void>;
    addAndRemoveWithHttpInfo(listId: string, membershipChangeRequest: MembershipChangeRequest, _options?: ConfigurationOptions): Observable<HttpInfo<MembershipsUpdateResponse>>;
    addAndRemove(listId: string, membershipChangeRequest: MembershipChangeRequest, _options?: ConfigurationOptions): Observable<MembershipsUpdateResponse>;
    getListsWithHttpInfo(objectTypeId: string, recordId: string, _options?: ConfigurationOptions): Observable<HttpInfo<ApiCollectionResponseRecordListMembershipNoPaging>>;
    getLists(objectTypeId: string, recordId: string, _options?: ConfigurationOptions): Observable<ApiCollectionResponseRecordListMembershipNoPaging>;
    getPageWithHttpInfo(listId: string, after?: string, before?: string, limit?: number, _options?: ConfigurationOptions): Observable<HttpInfo<ApiCollectionResponseJoinTimeAndRecordId>>;
    getPage(listId: string, after?: string, before?: string, limit?: number, _options?: ConfigurationOptions): Observable<ApiCollectionResponseJoinTimeAndRecordId>;
    getPageOrderedByAddedToListDateWithHttpInfo(listId: string, after?: string, before?: string, limit?: number, _options?: ConfigurationOptions): Observable<HttpInfo<ApiCollectionResponseJoinTimeAndRecordId>>;
    getPageOrderedByAddedToListDate(listId: string, after?: string, before?: string, limit?: number, _options?: ConfigurationOptions): Observable<ApiCollectionResponseJoinTimeAndRecordId>;
    removeWithHttpInfo(listId: string, requestBody: Array<string>, _options?: ConfigurationOptions): Observable<HttpInfo<MembershipsUpdateResponse>>;
    remove(listId: string, requestBody: Array<string>, _options?: ConfigurationOptions): Observable<MembershipsUpdateResponse>;
    removeAllWithHttpInfo(listId: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>>;
    removeAll(listId: string, _options?: ConfigurationOptions): Observable<void>;
}
