import { HttpInfo } from '../http/http';
import { Configuration, ConfigurationOptions } from '../configuration';
import { ApiCollectionResponseJoinTimeAndRecordId } from '../models/ApiCollectionResponseJoinTimeAndRecordId';
import { ApiCollectionResponseRecordListMembershipNoPaging } from '../models/ApiCollectionResponseRecordListMembershipNoPaging';
import { ListCreateRequest } from '../models/ListCreateRequest';
import { ListCreateResponse } from '../models/ListCreateResponse';
import { ListFetchResponse } from '../models/ListFetchResponse';
import { ListFilterUpdateRequest } from '../models/ListFilterUpdateRequest';
import { ListFolderCreateRequest } from '../models/ListFolderCreateRequest';
import { ListFolderCreateResponse } from '../models/ListFolderCreateResponse';
import { ListFolderFetchResponse } from '../models/ListFolderFetchResponse';
import { ListMoveRequest } from '../models/ListMoveRequest';
import { ListSearchRequest } from '../models/ListSearchRequest';
import { ListSearchResponse } from '../models/ListSearchResponse';
import { ListUpdateResponse } from '../models/ListUpdateResponse';
import { ListsByIdResponse } from '../models/ListsByIdResponse';
import { MembershipChangeRequest } from '../models/MembershipChangeRequest';
import { MembershipsUpdateResponse } from '../models/MembershipsUpdateResponse';
import { PublicBatchMigrationMapping } from '../models/PublicBatchMigrationMapping';
import { PublicMigrationMapping } from '../models/PublicMigrationMapping';
import { FoldersApiRequestFactory, FoldersApiResponseProcessor } from "../apis/FoldersApi";
export interface FoldersApiCreateRequest {
    listFolderCreateRequest: ListFolderCreateRequest;
}
export interface FoldersApiGetAllRequest {
    folderId?: string;
}
export interface FoldersApiMoveRequest {
    folderId: string;
    newParentFolderId: string;
}
export interface FoldersApiMoveListRequest {
    listMoveRequest: ListMoveRequest;
}
export interface FoldersApiRemoveRequest {
    folderId: string;
}
export interface FoldersApiRenameRequest {
    folderId: string;
    newFolderName?: string;
}
export declare class ObjectFoldersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: FoldersApiRequestFactory, responseProcessor?: FoldersApiResponseProcessor);
    createWithHttpInfo(param: FoldersApiCreateRequest, options?: ConfigurationOptions): Promise<HttpInfo<ListFolderCreateResponse>>;
    create(param: FoldersApiCreateRequest, options?: ConfigurationOptions): Promise<ListFolderCreateResponse>;
    getAllWithHttpInfo(param?: FoldersApiGetAllRequest, options?: ConfigurationOptions): Promise<HttpInfo<ListFolderFetchResponse>>;
    getAll(param?: FoldersApiGetAllRequest, options?: ConfigurationOptions): Promise<ListFolderFetchResponse>;
    moveWithHttpInfo(param: FoldersApiMoveRequest, options?: ConfigurationOptions): Promise<HttpInfo<ListFolderFetchResponse>>;
    move(param: FoldersApiMoveRequest, options?: ConfigurationOptions): Promise<ListFolderFetchResponse>;
    moveListWithHttpInfo(param: FoldersApiMoveListRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    moveList(param: FoldersApiMoveListRequest, options?: ConfigurationOptions): Promise<void>;
    removeWithHttpInfo(param: FoldersApiRemoveRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    remove(param: FoldersApiRemoveRequest, options?: ConfigurationOptions): Promise<void>;
    renameWithHttpInfo(param: FoldersApiRenameRequest, options?: ConfigurationOptions): Promise<HttpInfo<ListFolderFetchResponse>>;
    rename(param: FoldersApiRenameRequest, options?: ConfigurationOptions): Promise<ListFolderFetchResponse>;
}
import { ListsApiRequestFactory, ListsApiResponseProcessor } from "../apis/ListsApi";
export interface ListsApiCreateRequest {
    listCreateRequest: ListCreateRequest;
}
export interface ListsApiDoSearchRequest {
    listSearchRequest: ListSearchRequest;
}
export interface ListsApiGetAllRequest {
    listIds?: Array<string>;
    includeFilters?: boolean;
}
export interface ListsApiGetByIdRequest {
    listId: string;
    includeFilters?: boolean;
}
export interface ListsApiGetByNameRequest {
    listName: string;
    objectTypeId: string;
    includeFilters?: boolean;
}
export interface ListsApiRemoveRequest {
    listId: string;
}
export interface ListsApiRestoreRequest {
    listId: string;
}
export interface ListsApiUpdateListFiltersRequest {
    listId: string;
    listFilterUpdateRequest: ListFilterUpdateRequest;
    enrollObjectsInWorkflows?: boolean;
}
export interface ListsApiUpdateNameRequest {
    listId: string;
    listName?: string;
    includeFilters?: boolean;
}
export declare class ObjectListsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: ListsApiRequestFactory, responseProcessor?: ListsApiResponseProcessor);
    createWithHttpInfo(param: ListsApiCreateRequest, options?: ConfigurationOptions): Promise<HttpInfo<ListCreateResponse>>;
    create(param: ListsApiCreateRequest, options?: ConfigurationOptions): Promise<ListCreateResponse>;
    doSearchWithHttpInfo(param: ListsApiDoSearchRequest, options?: ConfigurationOptions): Promise<HttpInfo<ListSearchResponse>>;
    doSearch(param: ListsApiDoSearchRequest, options?: ConfigurationOptions): Promise<ListSearchResponse>;
    getAllWithHttpInfo(param?: ListsApiGetAllRequest, options?: ConfigurationOptions): Promise<HttpInfo<ListsByIdResponse>>;
    getAll(param?: ListsApiGetAllRequest, options?: ConfigurationOptions): Promise<ListsByIdResponse>;
    getByIdWithHttpInfo(param: ListsApiGetByIdRequest, options?: ConfigurationOptions): Promise<HttpInfo<ListFetchResponse>>;
    getById(param: ListsApiGetByIdRequest, options?: ConfigurationOptions): Promise<ListFetchResponse>;
    getByNameWithHttpInfo(param: ListsApiGetByNameRequest, options?: ConfigurationOptions): Promise<HttpInfo<ListFetchResponse>>;
    getByName(param: ListsApiGetByNameRequest, options?: ConfigurationOptions): Promise<ListFetchResponse>;
    removeWithHttpInfo(param: ListsApiRemoveRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    remove(param: ListsApiRemoveRequest, options?: ConfigurationOptions): Promise<void>;
    restoreWithHttpInfo(param: ListsApiRestoreRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    restore(param: ListsApiRestoreRequest, options?: ConfigurationOptions): Promise<void>;
    updateListFiltersWithHttpInfo(param: ListsApiUpdateListFiltersRequest, options?: ConfigurationOptions): Promise<HttpInfo<ListUpdateResponse>>;
    updateListFilters(param: ListsApiUpdateListFiltersRequest, options?: ConfigurationOptions): Promise<ListUpdateResponse>;
    updateNameWithHttpInfo(param: ListsApiUpdateNameRequest, options?: ConfigurationOptions): Promise<HttpInfo<ListUpdateResponse>>;
    updateName(param: ListsApiUpdateNameRequest, options?: ConfigurationOptions): Promise<ListUpdateResponse>;
}
import { MappingApiRequestFactory, MappingApiResponseProcessor } from "../apis/MappingApi";
export interface MappingApiTranslateLegacyListIdToListIdRequest {
    legacyListId?: string;
}
export interface MappingApiTranslateLegacyListIdToListIdBatchRequest {
    requestBody: Array<string>;
}
export declare class ObjectMappingApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MappingApiRequestFactory, responseProcessor?: MappingApiResponseProcessor);
    translateLegacyListIdToListIdWithHttpInfo(param?: MappingApiTranslateLegacyListIdToListIdRequest, options?: ConfigurationOptions): Promise<HttpInfo<PublicMigrationMapping>>;
    translateLegacyListIdToListId(param?: MappingApiTranslateLegacyListIdToListIdRequest, options?: ConfigurationOptions): Promise<PublicMigrationMapping>;
    translateLegacyListIdToListIdBatchWithHttpInfo(param: MappingApiTranslateLegacyListIdToListIdBatchRequest, options?: ConfigurationOptions): Promise<HttpInfo<PublicBatchMigrationMapping>>;
    translateLegacyListIdToListIdBatch(param: MappingApiTranslateLegacyListIdToListIdBatchRequest, options?: ConfigurationOptions): Promise<PublicBatchMigrationMapping>;
}
import { MembershipsApiRequestFactory, MembershipsApiResponseProcessor } from "../apis/MembershipsApi";
export interface MembershipsApiAddRequest {
    listId: string;
    requestBody: Array<string>;
}
export interface MembershipsApiAddAllFromListRequest {
    listId: string;
    sourceListId: string;
}
export interface MembershipsApiAddAndRemoveRequest {
    listId: string;
    membershipChangeRequest: MembershipChangeRequest;
}
export interface MembershipsApiGetListsRequest {
    objectTypeId: string;
    recordId: string;
}
export interface MembershipsApiGetPageRequest {
    listId: string;
    after?: string;
    before?: string;
    limit?: number;
}
export interface MembershipsApiGetPageOrderedByAddedToListDateRequest {
    listId: string;
    after?: string;
    before?: string;
    limit?: number;
}
export interface MembershipsApiRemoveRequest {
    listId: string;
    requestBody: Array<string>;
}
export interface MembershipsApiRemoveAllRequest {
    listId: string;
}
export declare class ObjectMembershipsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MembershipsApiRequestFactory, responseProcessor?: MembershipsApiResponseProcessor);
    addWithHttpInfo(param: MembershipsApiAddRequest, options?: ConfigurationOptions): Promise<HttpInfo<MembershipsUpdateResponse>>;
    add(param: MembershipsApiAddRequest, options?: ConfigurationOptions): Promise<MembershipsUpdateResponse>;
    addAllFromListWithHttpInfo(param: MembershipsApiAddAllFromListRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    addAllFromList(param: MembershipsApiAddAllFromListRequest, options?: ConfigurationOptions): Promise<void>;
    addAndRemoveWithHttpInfo(param: MembershipsApiAddAndRemoveRequest, options?: ConfigurationOptions): Promise<HttpInfo<MembershipsUpdateResponse>>;
    addAndRemove(param: MembershipsApiAddAndRemoveRequest, options?: ConfigurationOptions): Promise<MembershipsUpdateResponse>;
    getListsWithHttpInfo(param: MembershipsApiGetListsRequest, options?: ConfigurationOptions): Promise<HttpInfo<ApiCollectionResponseRecordListMembershipNoPaging>>;
    getLists(param: MembershipsApiGetListsRequest, options?: ConfigurationOptions): Promise<ApiCollectionResponseRecordListMembershipNoPaging>;
    getPageWithHttpInfo(param: MembershipsApiGetPageRequest, options?: ConfigurationOptions): Promise<HttpInfo<ApiCollectionResponseJoinTimeAndRecordId>>;
    getPage(param: MembershipsApiGetPageRequest, options?: ConfigurationOptions): Promise<ApiCollectionResponseJoinTimeAndRecordId>;
    getPageOrderedByAddedToListDateWithHttpInfo(param: MembershipsApiGetPageOrderedByAddedToListDateRequest, options?: ConfigurationOptions): Promise<HttpInfo<ApiCollectionResponseJoinTimeAndRecordId>>;
    getPageOrderedByAddedToListDate(param: MembershipsApiGetPageOrderedByAddedToListDateRequest, options?: ConfigurationOptions): Promise<ApiCollectionResponseJoinTimeAndRecordId>;
    removeWithHttpInfo(param: MembershipsApiRemoveRequest, options?: ConfigurationOptions): Promise<HttpInfo<MembershipsUpdateResponse>>;
    remove(param: MembershipsApiRemoveRequest, options?: ConfigurationOptions): Promise<MembershipsUpdateResponse>;
    removeAllWithHttpInfo(param: MembershipsApiRemoveAllRequest, options?: ConfigurationOptions): Promise<HttpInfo<void>>;
    removeAll(param: MembershipsApiRemoveAllRequest, options?: ConfigurationOptions): Promise<void>;
}
